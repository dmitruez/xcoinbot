# Third party
from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeChat, BotCommandScopeDefault
from aiogram.exceptions import TelegramNotFound
from xcoinbot.bot.services import Services
from xcoinbot.bot.config import Config



async def setup_commands(bot: Bot, services: Services):
    base_commands = [
        BotCommand(command='/start', description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ"),
        BotCommand(command='/channel', description="–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª")
    ]

    regular_admin_commands = [
        BotCommand(command='/stats', description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand(command='/admin', description="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    ]

    super_admin_commands = [
        BotCommand(command='/ban', description="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"),
        BotCommand(command='/unban', description="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"),
        BotCommand(command='/set_backup_channel', description="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª"),
        BotCommand(command='/edit_notification', description="–ò–∑–º–Ω–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    ]

    developer_commands = [
        BotCommand(command='/logs', description='–ü–æ–ª—É—á–∏—Ç—å –õ–æ–≥–∏'),
        BotCommand(command='/backup', description="–°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø"),
    ]

    await bot.set_my_commands(base_commands, scope=BotCommandScopeDefault())

    regular_admins, super_admins = await services.admin.list_admins()

    for regular_admin in regular_admins:
        try:
            await bot.set_my_commands(regular_admin_commands,
                                      scope=BotCommandScopeChat(chat_id=regular_admin.user_id))
        except TelegramNotFound:
            pass

    for super_admin in super_admins:
        try:
            await bot.set_my_commands(regular_admin_commands + super_admin_commands,
                                      scope=BotCommandScopeChat(chat_id=super_admin.user_id)
                                      )
        except TelegramNotFound:
            pass

    for developer_id in Config.DEVELOPERS_IDS:
        try:
            await bot.set_my_commands(regular_admin_commands + super_admin_commands + developer_commands,
                                      scope=BotCommandScopeChat(chat_id=developer_id)
                                      )
        except TelegramNotFound:
            pass

async def delete_commands(bot: Bot, services: Services):
    await bot.set_my_commands([], scope=BotCommandScopeDefault())
    regular_admins, super_admins = await services.admin.list_admins()

    for admin in regular_admins + super_admins:
        await bot.set_my_commands([], scope=BotCommandScopeChat(chat_id=admin.user_id))
