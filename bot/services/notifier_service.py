# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import json
from pathlib import Path
from typing import Dict, Optional

from aiogram import Bot, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..models import NotificationTemplate, Channel
from ..repositories import Repositories
from ..utils.loggers import services as logger


class NotificationService:
	TEMPLATE_FILE = "notification_template.json"

	def __init__(self, bot: Bot, repos: Repositories):
		self.bot = bot
		self.repos = repos
		self.template = self.load_template()

	def load_template(self) -> NotificationTemplate:
		"""–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
		if not Path(self.TEMPLATE_FILE).exists():
			# –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
			default_template = NotificationTemplate(
				text="üîî –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω!\n\n–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª: &title \n–°—Å—ã–ª–∫–∞: &link",
				buttons=[]
			)
			self.save_template(template=default_template)
			return default_template

		try:
			with open(self.TEMPLATE_FILE, 'r', encoding='utf-8') as f:
				data = json.load(f)
				return NotificationTemplate(
					text=data['text'],
					buttons=[(btn['text'], btn['url']) for btn in data['buttons']]
				)
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
			return NotificationTemplate(text="", buttons=[])

	def save_template(self, template: NotificationTemplate = None) -> None:
		"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –≤ JSON-—Ñ–∞–π–ª"""
		if template:
			data = {
				"text": template.text,
				"buttons": [{"text": text, "url": url} for text, url in template.buttons]
			}
		else:
			data = {
				"text": self.template.text,
				"buttons": [{"text": text, "url": url} for text, url in self.template.buttons]
			}

		with open(self.TEMPLATE_FILE, 'w', encoding='utf-8') as f:
			json.dump(data, f, ensure_ascii=False, indent=2)

	async def get_template(self) -> NotificationTemplate:
		"""–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
		return self.template

	async def update_template_text(self, new_text: str) -> None:
		"""–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞"""
		self.template.text = new_text
		self.save_template()

	async def add_template_button(self, text: str, url: str) -> bool:
		"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫ —à–∞–±–ª–æ–Ω—É"""
		if len(self.template.buttons) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
			return False
		self.template.buttons.append((text, url))
		self.save_template()
		return True

	async def clear_template_buttons(self) -> None:
		"""–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —à–∞–±–ª–æ–Ω–∞"""
		self.template.buttons.clear()
		self.save_template()

	async def remove_template_button(self, index: int) -> bool:
		"""–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
		if 0 <= index < len(self.template.buttons):
			self.template.buttons.pop(index)
			self.save_template()
			return True
		return False

	async def format_notification(self, channel) -> tuple[str, Optional[types.InlineKeyboardMarkup]]:
		"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —à–∞–±–ª–æ–Ω—É"""

		formatted_text = self.template.text
		formatted_text = formatted_text.replace("&title", channel.title)
		formatted_text = formatted_text.replace("&link", channel.link)

		keyboard = None
		if self.template.buttons:
			builder = InlineKeyboardBuilder()
			for text, url in self.template.buttons:
				builder.button(text=text, url=url)
			builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
			keyboard = builder.as_markup()

		return formatted_text, keyboard

	async def notify_channel_change(self, new_channel: Channel) -> Dict[str, int]:
		"""–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞"""
		users = await self.repos.user.get_users_for_notification()
		text, keyboard = await self.format_notification(new_channel)

		success = 0
		failures = 0

		for user in users:
			try:
				await self.bot.send_message(
					chat_id=user.user_id,
					text=text,
					reply_markup=keyboard if keyboard else None,
					disable_web_page_preview=True
				)
				success += 1
			except Exception as e:
				logger.error(f"Failed to notify user {user.user_id}: {e}")
				failures += 1
				await self.repos.user.set_notification_status(user.user_id, False)

		return {'success': success, 'failures': failures}
