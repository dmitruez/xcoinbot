from typing import List, Tuple

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..models import User


class AdminKeyboards:
	@staticmethod
	def main_menu(admin_level: int):
		"""–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è"""
		builder = InlineKeyboardBuilder()
		adjust = []

		# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
		builder.add(
			InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
			InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
			InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_notification"),
			InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="admin_welcome")
		)
		adjust.extend([2, 1])

		# –ö–Ω–æ–ø–∫–∏ –¥–ª—è super admin (—É—Ä–æ–≤–µ–Ω—å 2+)
		if admin_level >= 2:
			builder.add(
				InlineKeyboardButton(text="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="admin_channels")
			)
			adjust.append(1)

		# –ö–Ω–æ–ø–∫–∏ –¥–ª—è developer (—É—Ä–æ–≤–µ–Ω—å 3)
		if admin_level >= 3:
			builder.add(
				InlineKeyboardButton(text="üìú –õ–æ–≥–∏", callback_data="admin_logs"),
				InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø", callback_data="admin_backup")
			)
			adjust.append(2)

		builder.adjust(*adjust)
		return builder.as_markup()

	@staticmethod
	def users_menu():
		builder = InlineKeyboardBuilder()
		builder.add(
			InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
			InlineKeyboardButton(text="üßæ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users_list"), # –ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_main")
		)
		builder.adjust(1)
		return builder.as_markup()

	@staticmethod
	def search_menu():
		"""–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
		builder = InlineKeyboardBuilder()
		builder.row(
			InlineKeyboardButton(text="üîç –ü–æ username", callback_data="admin_search_username"),
			width=1
		)
		builder.row(
			InlineKeyboardButton(text="üîç –ü–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏", callback_data="admin_search_nickname"),
			width=1
		)
		builder.row(
			InlineKeyboardButton(text="üîç –ü–æ ID", callback_data="admin_search_id"),
			width=1
		)
		builder.row(
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_users"),
			width=1
		)
		return builder.as_markup()
	
	
	@staticmethod
	def admin_welcome():
		kb_builder = InlineKeyboardBuilder()
		kb_builder.button(text="‚úèÔ∏è –¢–µ–∫—Å—Ç", callback_data="welcome_edit_text")
		kb_builder.button(text="üñº –ú–µ–¥–∏–∞", callback_data="welcome_edit_media")
		kb_builder.button(text="üîò –ö–Ω–æ–ø–∫–∏", callback_data="welcome_manage_buttons")
		kb_builder.button(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="welcome_preview")
		kb_builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")
		kb_builder.adjust(2, 2, 1)
		return kb_builder.as_markup()

	@staticmethod
	def cancel_search():
		"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞"""
		builder = InlineKeyboardBuilder()
		builder.add(InlineKeyboardButton(
			text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
			callback_data="admin_users"
		))
		return builder.as_markup()

	@staticmethod
	def back_to_search():
		"""–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É"""
		builder = InlineKeyboardBuilder()
		builder.add(InlineKeyboardButton(
			text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É",
			callback_data="admin_search_menu"
		))
		return builder.as_markup()


	@staticmethod
	def profile_menu(user: User, is_admin: bool=False, admin_level: int=None, access_level: int = None) -> InlineKeyboardMarkup:
		builder = InlineKeyboardBuilder()
		adjust = []

		button_notif = InlineKeyboardButton(text="‚ùå –ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
											callback_data=f"admin_ban_{user.user_id} ") \
			if user.should_notify else InlineKeyboardButton(text="‚úÖ –£–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
															callback_data=f"admin_unban_{user.user_id}")
		adjust.append(1)
		builder.add(
			button_notif
		)


		if access_level > 1:

			# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–∞
			if is_admin:
				builder.add(InlineKeyboardButton(
					text="üëë –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞",
					callback_data=f"admin_revoke_{user.user_id}"
				))
			else:
				builder.add(InlineKeyboardButton(
					text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º",
					callback_data=f"admin_grant_{user.user_id}"
				))

			adjust.append(1)

			# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–º –∞–¥–º–∏–Ω–∞
			if is_admin:
				builder.row(
					InlineKeyboardButton(text=f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {admin_level}", callback_data="no_action"),
					width=1
				)
				for level in [1, 2, 3]:
					if level != admin_level:
						builder.add(InlineKeyboardButton(
							text=f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å {level}",
							callback_data=f"admin_setlevel_{user.user_id}_{level}"
						))
				adjust.extend([1, 2])

		builder.add(
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_users")
		)
		adjust.append(1)
		builder.adjust(*adjust)
		return builder.as_markup()

	@staticmethod
	def channels_menu():
		builder = InlineKeyboardBuilder()
		builder.add(
			InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="admin_change_main"),
			InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_change_backup"),
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_main")
		)
		builder.adjust(2)
		return builder.as_markup()

	@staticmethod
	def back_to_main():
		builder = InlineKeyboardBuilder()
		builder.add(InlineKeyboardButton(text="‚óÄ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main"))
		return builder.as_markup()

	@staticmethod
	def stats_menu():
		builder = InlineKeyboardBuilder()
		builder.add(
			InlineKeyboardButton(text="üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥", callback_data="admin_stats_period"),
			InlineKeyboardButton(text="üìä –ó–∞ 7 –¥–Ω–µ–π", callback_data="admin_stats_7days"),
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_main")
		)
		builder.adjust(2)
		return builder.as_markup()

	@staticmethod
	def back_to_notification():
		builder = InlineKeyboardBuilder()
		builder.add(InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="admin_notification"))
		return builder.as_markup()

	@staticmethod
	def buttons_menu():
		builder = InlineKeyboardBuilder()
		builder.add(
			InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="admin_add_button"),
			InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="admin_remove_button"),
			InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="admin_clear_buttons"),
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_notification")
		)
		builder.adjust(2, 1, 1)
		return builder.as_markup()

	@staticmethod
	def confirm_send_menu():
		builder = InlineKeyboardBuilder()
		builder.add(
			InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
			InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_notification"),
		)
		builder.adjust(2)
		return builder.as_markup()

	@staticmethod
	def back_to_buttons():
		builder = InlineKeyboardBuilder()
		builder.add(InlineKeyboardButton(text="‚óÄ –ö —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫", callback_data="admin_manage_buttons"))
		return builder.as_markup()

	@staticmethod
	def remove_buttons(template):
		builder = InlineKeyboardBuilder()
		for i, btn in enumerate(template.buttons):
			builder.button(text=f"{i + 1}. {btn[0]}", callback_data=f"remove_button_{i}")

		builder.button(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_manage_buttons")

		return builder.as_markup()

	@staticmethod
	def logs_buttons(log_files):
		builder = InlineKeyboardBuilder()

		for name in log_files[:7]:
			builder.button(text=name, callback_data=f'logs-{name}')

		builder.adjust(1)

		return builder.as_markup()

	@staticmethod
	def notification_menu():
		builder = InlineKeyboardBuilder()
		builder.row(
			InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="admin_edit_text"),
			width=1
		)
		builder.row(
			InlineKeyboardButton(text="üîò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏", callback_data="admin_manage_buttons"),
			width=1
		)
		builder.row(
			InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="admin_preview_notification"),
			InlineKeyboardButton(text="‚úâÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_send_notification"),
			width=2
		)
		builder.row(
			InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data="admin_main"),
			width=1
		)
		return builder.as_markup()




	def channels_list(self, channels: List[Tuple[str, str]], current_page: int, total_pages: int, prefix: str):
		"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
		builder = InlineKeyboardBuilder()
		adjust = []
		# times, empty_button = divmod(len(channels), 2)
		for i in range(len(channels) - 1):
			adjust.append(1)
		# if empty_button:
		# 	adjust.append(2)

		# –ö–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
		for text, callback_data in channels:
			builder.add(InlineKeyboardButton(text=text, callback_data=callback_data))

		# if empty_button:
		# 	builder.add(InlineKeyboardButton(text="_", callback_data="_"))

		# –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		self._add_pagination_buttons(builder, total_pages, prefix, current_page, adjust)

		# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
		builder.add(InlineKeyboardButton(text="‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", callback_data="admin_channels"))
		adjust.append(1)

		builder.adjust(*adjust)
		return builder.as_markup()

	def users_list(self, users: List[Tuple[str, str]], current_page: int, total_pages: int, prefix: str):
		"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
		builder = InlineKeyboardBuilder()
		adjust = []
		times, empty_button = divmod(len(users), 2)
		for i in range(len(users) - 1):
			adjust.append(2)
		if empty_button:
			adjust.append(2)

		# –ö–Ω–æ–ø–∫–∏ –∞–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		for text, callback_data in users:
			builder.add(InlineKeyboardButton(text=text, callback_data=callback_data))

		if empty_button:
			builder.add(InlineKeyboardButton(text="_", callback_data="_"))

		# –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		self._add_pagination_buttons(builder, total_pages, prefix, current_page, adjust)

		# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
		builder.add(InlineKeyboardButton(text="‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥", callback_data="admin_channels"))
		adjust.append(1)

		builder.adjust(*adjust)
		return builder.as_markup()

	@staticmethod
	def _add_pagination_buttons(builder, total_pages, prefix, current_page, adjust):
		# –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
		pagination_buttons = []

		if total_pages > 1:
			if current_page > 1:
				pagination_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"{prefix}_page_{current_page - 1}"))

			pagination_buttons.append((f"{current_page}/{total_pages}", "current_page"))

			if current_page < total_pages:
				pagination_buttons.append(("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", f"{prefix}_page_{current_page + 1}"))

			for text, callback_data in pagination_buttons:
				builder.add(InlineKeyboardButton(text=text, callback_data=callback_data))

			adjust.append(3)

		return pagination_buttons

	@staticmethod
	def admin_channel():
		builder = InlineKeyboardBuilder()
		builder.button(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π/—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª", callback_data="admin_channels")
		return builder.as_markup()