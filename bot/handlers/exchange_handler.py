from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile

from .captcha_handler import send_captcha
from ..keyboards.exchange_keyboards import ExchangeKeyboards
from ..keyboards.user_keyboard import UserKeyboards
from ..services import Services
from ..states.exchange_states import ExchangeStates


router = Router(name=__name__)


@router.message(F.data == "exchange")
async def start_exchange(message: Message, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞"""

	await message.answer(
		"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
		reply_markup=ExchangeKeyboards.payment_methods()
	)
	await state.set_state(ExchangeStates.SELECT_PAYMENT_METHOD)


@router.callback_query(F.data.startswith("method_"), ExchangeStates.SELECT_PAYMENT_METHOD)
async def select_payment_method(callback: CallbackQuery, state: FSMContext):
	"""–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""

	method = callback.data.split("_")[1]
	await state.update_data(payment_method=method)

	await callback.message.edit_text(
		"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
		reply_markup=ExchangeKeyboards.currency_pairs()
	)
	await state.set_state(ExchangeStates.SELECT_CURRENCY_PAIR)


@router.callback_query(F.data.startswith("pair_"), ExchangeStates.SELECT_CURRENCY_PAIR)
async def select_currency_pair(callback: CallbackQuery, state: FSMContext, services: Services):
	"""–í—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤"""
	currency_pair = callback.data.split("_")[1]
	from_curr, to_curr = currency_pair.split("-")

	await state.update_data(currency_pair=currency_pair, from_curr=from_curr, to_curr=to_curr)

	# –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –æ—Ç –±–∏—Ä–∂
	rates = await services.exchange.get_rates(from_curr, to_curr)

	if not rates:
		await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
		return

	await state.update_data(rates=rates)

	# –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
	text = "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
	for exchange, rate in rates.items():
		text += f"‚Ä¢ {exchange.capitalize()}: 1 {from_curr} = {rate} {to_curr}\n"

	await callback.message.edit_text(
		text,
		reply_markup=ExchangeKeyboards.exchanges_list(list(rates.keys()))
	)
	await state.set_state(ExchangeStates.SELECT_EXCHANGE)


@router.callback_query(F.data.startswith("exchange_"))
async def select_exchange(callback: CallbackQuery, state: FSMContext):
	"""–í—ã–±–æ—Ä –æ–±–º–µ–Ω–Ω–∏–∫–∞"""
	exchange = callback.data.split("_")[1]
	await state.update_data(selected_exchange=exchange)

	data = await state.get_data()
	rate = data['rates'][exchange]

	await callback.message.edit_text(
		f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {exchange.capitalize()}\n"
		f"–ö—É—Ä—Å: 1 {data['from_curr']} = {rate} {data['to_curr']}\n\n"
		f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞ –≤ {data['from_curr']}:"
	)
	await state.set_state(ExchangeStates.INPUT_AMOUNT)


@router.message(F.text, ExchangeStates.INPUT_AMOUNT)
async def input_amount(message: Message, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
	try:
		amount = float(message.text)
		if amount <= 0:
			raise ValueError
	except ValueError:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
		return

	await state.update_data(amount=amount)

	# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
	data = await state.get_data()
	rate = data['rates'][data['selected_exchange']]
	total = amount * rate

	await message.answer(
		f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {total:.2f} {data['to_curr']}\n\n"
		"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
		reply_markup=ExchangeKeyboards.cancel_exchange()
	)
	await state.set_state(ExchangeStates.INPUT_USER_DATA)


@router.message(ExchangeStates.INPUT_USER_DATA)
async def input_user_data(message: Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
	user_id = message.from_user.id
	await state.update_data(recipient_data=message.text)

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
	captcha_text, image_path = await services.captcha.generate_captcha(user_id)

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –∫–∞–∫ —Ñ–∞–π–ª
	captcha_message = await message.answer_photo(
		photo=FSInputFile(image_path),
		caption="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
		reply_markup=UserKeyboards.captcha_refresh()
	)
	# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	await services.captcha.cleanup(image_path)
	await state.update_data(captcha_message=captcha_message, attemps=0)
	await state.set_state(ExchangeStates.CAPTCHA)


@router.message(ExchangeStates.CAPTCHA)
async def check_captcha(message: Message, state: FSMContext, services: Services):
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ –∏ –≤—ã–≤–æ–¥ —É—Å–ª–æ–≤–∏–π"""
	if len(message.text) > 6:
		return
	await message.delete()
	user_id = message.from_user.id
	user_input = message.text.strip()

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
	success, response, attemps = await services.captcha.verify_captcha(user_id, user_input)

	# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞–ø—á–∏
	state_data = await state.get_data()
	captcha_message: Message = state_data["captcha_message"]


	if not success:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return

	# –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –æ–±–º–µ–Ω–∞
	# terms = (
	# 	f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
	# 	f"‚Ä¢ –û–±–º–µ–Ω–Ω–∏–∫: {data['selected_exchange'].capitalize()}\n"
	# 	f"‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['from_curr']} ‚Üí {data['to_curr']}\n"
	# 	f"‚Ä¢ –°—É–º–º–∞: {data['amount']} {data['from_curr']}\n"
	# 	f"‚Ä¢ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {data['amount'] * data['rates'][data['selected_exchange']]} {data['to_curr']}\n"
	# 	f"‚Ä¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {data['recipient_data']}\n\n"
	# 	"<b>–£—Å–ª–æ–≤–∏—è:</b>\n"
	# 	"1. –û–±–º–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n"
	# 	"2. –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º\n"
	# 	"3. –ö—É—Ä—Å —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"
	# )

	# await message.answer(
	# 	terms,
	# 	parse_mode="HTML",
	# 	reply_markup=ExchangeKeyboards.terms_agreement()
	# )
	# await state.set_state(ExchangeStates.TERMS_AGREEMENT)