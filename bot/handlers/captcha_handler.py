# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InputMediaPhoto

from ..keyboards.user_keyboard import UserKeyboards
from ..services import Services
from ..states.base_states import CaptchaStates


router = Router(name=__name__)


async def send_captcha(message: Message, state: FSMContext, services: Services):
	user_id = message.from_user.id
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
	captcha_text, image_path = await services.captcha.generate_captcha(user_id)


	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É –∫–∞–∫ —Ñ–∞–π–ª
	captcha_message = await message.answer_photo(
		photo=FSInputFile(image_path),
		caption="üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
		reply_markup=UserKeyboards.captcha_refresh()
	)
	# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	await services.captcha.cleanup(image_path)
	await state.update_data(captcha_message=captcha_message, attemps=0)
	await state.set_state(CaptchaStates.WAITING_CAPTCHA)



@router.message(F.text, CaptchaStates.WAITING_CAPTCHA)
async def check_captcha(message: types.Message, services: Services, state: FSMContext):
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞–ø—á–∏"""
	await message.delete()
	if len(message.text) > 6:
		return
	user_id = message.from_user.id
	user_input = message.text.strip()

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É
	success, response, attemps = await services.captcha.verify_captcha(user_id, user_input)

	# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞–ø—á–∏
	state_data = await state.get_data()
	captcha_message: Message = state_data["captcha_message"]

	if success:
		# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await services.user.mark_captcha_passed(user_id)
		await state.clear()

		# –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
		channel = await services.channel.get_main_channel()
		if channel:
			await message.answer(
				f"‚úÖ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!\n"
				f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {channel.link}"
			)
		else:
			await message.answer("‚úÖ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
	else:
		# await message.answer(response)
		pass

		# –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
		if attemps < 3:
			captcha_text, image_path = await services.captcha.generate_captcha(user_id, attemps=attemps)
			captcha_message = await captcha_message.edit_media(
				media=InputMediaPhoto(media=FSInputFile(image_path)),
				reply_markup=UserKeyboards.captcha_refresh()
			)
			await captcha_message.edit_caption(
				caption=f"{response}\n\nüîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
				reply_markup=UserKeyboards.captcha_refresh()
			)
			# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
			await services.captcha.cleanup(image_path)
			await state.update_data(attemps=attemps, captcha_message=captcha_message)
		else:
			await services.user.ban_user(user_id)


@router.callback_query(F.data == "refresh_captcha")
async def refresh_captcha_handler(callback: types.CallbackQuery, services: Services, state: FSMContext):
	"""–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = callback.from_user.id
	state_data = await state.get_data()

	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
	captcha_text, image_path = await services.captcha.generate_captcha(user_id, attemps=state_data['attemps'])

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞–ø—á—É
	await callback.message.edit_media(
		media=InputMediaPhoto(media=FSInputFile(image_path)),
		reply_markup=UserKeyboards.captcha_refresh()
	)
	await callback.message.edit_caption(
		caption="üîÑ –ö–∞–ø—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
		reply_markup=UserKeyboards.captcha_refresh()
	)
	# –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
	await services.captcha.cleanup(image_path)
	await callback.answer()