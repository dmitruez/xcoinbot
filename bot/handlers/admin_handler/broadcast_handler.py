import uuid
from typing import List, Optional

from aiogram import Router, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from ...keyboards.admin_keyboard import BroadCastKeyboards, AdminKeyboards
from ...services import Services
from ...states.admin_states import BroadcastStates
from ...models import BroadcastMessage, Button
from ...utils.loggers import handlers as logger


router = Router(name=__name__)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏
@router.message(Command('broadcast'))
@router.callback_query(F.data == "admin_broadcast")
async def broadcast_menu(callback: types.CallbackQuery | types.Message, state: FSMContext):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
	state_data = await state.get_data()
	if delete_message := state_data.get("delete_message"):
		try:
			await delete_message.delete()
		except:
			pass
		await state.clear()
	
	text = ("üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
	        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
	
	if isinstance(callback, types.CallbackQuery):
		await callback.message.edit_text(
			text=text,
			reply_markup=BroadCastKeyboards.broadcast_menu()
		)
		await callback.answer()
	else:
		await callback.answer(
			text=text,
			reply_markup=BroadCastKeyboards.broadcast_menu()
		)


# –ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@router.callback_query(F.data == "broadcast_quick")
async def quick_broadcast_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –±—ã—Å—Ç—Ä–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
	await state.update_data(buttons=[])
	await callback.message.edit_text(
		"‚úâÔ∏è <b>–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
		"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
		reply_markup=BroadCastKeyboards.back_to_broadcast()
	)
	await state.set_state(BroadcastStates.WAITING_CONTENT)
	await callback.answer()


@router.message(BroadcastStates.WAITING_CONTENT)
async def process_broadcast_content(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	content = {
		"text": message.html_text if message.text else message.caption,
		"media_type": message.content_type,
		"media_id": None
	}
	
	if message.photo:
		content["media_id"] = message.photo[-1].file_id
	elif message.video:
		content["media_id"] = message.video.file_id
	elif message.document:
		content["media_id"] = message.document.file_id
	
	await state.update_data(content=content)
	
	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	await message.answer(
		"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏?",
		reply_markup=BroadCastKeyboards.confirm_add_buttons()
	)


@router.callback_query(F.data == "broadcast_manage_buttons")
async def broadcast_manage_buttons(callback: types.CallbackQuery, state: FSMContext):
	# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	await callback.message.edit_text(
		"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏?",
		reply_markup=BroadCastKeyboards.confirm_add_buttons()
	)


@router.callback_query(F.data == "broadcast_add_button")
async def broadcast_add_buttons(callback: types.CallbackQuery, state: FSMContext):
	"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ"""
	await callback.message.edit_text(
		"üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:",
		reply_markup=AdminKeyboards.button_type_keyboard('broadcast')
	)
	await state.set_state(BroadcastStates.SELECT_BUTTON_TYPE)
	await callback.answer()


@router.callback_query(
	BroadcastStates.SELECT_BUTTON_TYPE,
	F.data.in_(["broadcast_type_url", "broadcast_type_text"])
)
async def select_button_type(
		callback: types.CallbackQuery,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
	button_type = "url" if callback.data == "broadcast_type_url" else "text"
	await state.update_data(button_type=button_type)
	
	back_kb = InlineKeyboardBuilder()
	back_kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="broadcast_add_button")
	
	await callback.message.edit_text(
		"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:",
		reply_markup=back_kb.as_markup()
	)
	await state.set_state(BroadcastStates.WAITING_BUTTON_TEXT)
	await callback.answer()


@router.message(BroadcastStates.WAITING_BUTTON_TEXT)
async def add_button_text(
		message: types.Message,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
	if len(message.text) > 20:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
	
	if len(message.text) < 2:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
	
	await state.update_data(button_text=message.text)
	data = await state.get_data()
	
	if data.get('button_type') == "url":
		await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
		await state.set_state(BroadcastStates.WAITING_BUTTON_URL)
	else:
		await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:")
		await state.set_state(BroadcastStates.WAITING_BUTTON_CONTENT)


@router.message(BroadcastStates.WAITING_BUTTON_URL)
async def add_button_url(
		message: types.Message,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏"""
	data = await state.get_data()
	button_text = data.get('button_text')
	
	# –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
	if not message.text.startswith(('http://', 'https://')):
		return await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
	
	button_id = str(uuid.uuid4())
	
	button = Button(
		id=button_id,
		text=button_text,
		button_type='url',
		value=message.text
	)
	
	buttons = data.get('buttons', [])
	buttons.append(button)
	await state.update_data(buttons=buttons)
	
	await message.answer(
		"‚úÖ URL-–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫—É?",
		reply_markup=BroadCastKeyboards.confirm_add_another()
	)
	await state.set_state(BroadcastStates.CONFIRM_ADD_ANOTHER)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
@router.message(BroadcastStates.WAITING_BUTTON_CONTENT)
async def add_button_content(
		message: types.Message,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
	data = await state.get_data()
	button_text = data.get('button_text')
	

	button_id = str(uuid.uuid4())
	
	button = Button(
		id=button_id,
		text=button_text,
		button_type='text',
		value=message.text
	)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ —Å–ø–∏—Å–∫—É
	buttons = data.get('buttons', [])
	buttons.append(button)
	await state.update_data(buttons=buttons)
	
	await message.answer(
		"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫—É?",
		reply_markup=BroadCastKeyboards.confirm_add_another()
	)
	await state.set_state(BroadcastStates.CONFIRM_ADD_ANOTHER)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –∫–Ω–æ–ø–∫–∏
@router.callback_query(
	BroadcastStates.CONFIRM_ADD_ANOTHER,
	F.data.in_(["broadcast_add_another", "broadcast_finish_buttons"])
)
async def process_add_another(
		callback: types.CallbackQuery,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	if callback.data == "broadcast_add_another":
		await callback.message.edit_text(
			"üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:",
			reply_markup=AdminKeyboards.button_type_keyboard('broadcast')
		)
		await state.set_state(BroadcastStates.SELECT_BUTTON_TYPE)
	else:
		await confirm_broadcast(callback.message, state)
	
	await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async def confirm_broadcast(
		message: types.Message,
		state: FSMContext
):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º"""
	data = await state.get_data()
	content = data.get('content', {})
	buttons: Optional[List[Button]] = data.get('buttons', None)
	
	keyboard = None
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	if buttons:
		builder = InlineKeyboardBuilder()
		for btn in buttons:
			if btn.button_type == 'url':
				builder.button(text=btn.text, url=btn.value)
			else:
				builder.button(text=btn.text, callback_data=f"preview_btn:{btn.id}")
		builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
		keyboard = builder.as_markup()
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
	if content['media_type'] == 'photo':
		await message.answer_photo(
			content['media_id'],
			caption=content['text'],
			reply_markup=keyboard
		)
	elif content['media_type'] == 'video':
		await message.answer_video(
			content['media_id'],
			caption=content['text'],
			reply_markup=keyboard
		)
	elif content['media_type'] == 'document':
		await message.answer_document(
			content['media_id'],
			caption=content['text'],
			reply_markup=keyboard
		)
	else:
		await message.answer(
			content['text'],
			reply_markup=keyboard
		)
	
	await message.answer(
		"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
		reply_markup=BroadCastKeyboards.confirm_broadcast()
	)
	await state.set_state(BroadcastStates.CONFIRM_BROADCAST)


# –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(BroadcastStates.CONFIRM_BROADCAST, F.data == "broadcast_confirm")
async def start_broadcast(
		callback: types.CallbackQuery,
		state: FSMContext,
		services: Services
):
	"""–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
	data = await state.get_data()
	content = data.get('content', {})
	buttons = data.get('buttons', [])
	
	# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users = await services.user.get_users_for_notification()
	total_users = len(users)
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
	broadcast_id = await services.broadcast.save_broadcast(
		text=content.get('text', ''),
		media_type=content.get('media_type', 'text'),
		media_id=content.get('media_id'),
		buttons=buttons,
		sent_by=callback.from_user.id,
		total_users=total_users
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	success = 0
	errors = 0
	
	for user in users:
		try:
			keyboard = None
			# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			if buttons:
				builder = InlineKeyboardBuilder()
				for btn in buttons:
					if btn.button_type == 'url':
						builder.button(text=btn.text, url=btn.value)
					else:
						builder.button(text=btn.text, callback_data=f"broadcast_textbtn:{broadcast_id}:{btn.id}")
				builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
				keyboard = builder.as_markup()
			
			if content['media_type'] == 'photo':
				await callback.bot.send_photo(
					chat_id=user.user_id,
					photo=content['media_id'],
					caption=content['text'],
					reply_markup=keyboard
				)
			elif content['media_type'] == 'video':
				await callback.bot.send_video(
					chat_id=user.user_id,
					video=content['media_id'],
					caption=content['text'],
					reply_markup=keyboard
				)
			elif content['media_type'] == 'document':
				await callback.bot.send_document(
					chat_id=user.user_id,
					document=content['media_id'],
					caption=content['text'],
					reply_markup=keyboard
				)
			else:
				await callback.bot.send_message(
					chat_id=user.user_id,
					text=content['text'],
					reply_markup=keyboard
				)
			success += 1
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
			await services.user.set_notification_status(user.user_id, False)
			await services.user.ban_user(user.user_id)
			errors += 1
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	await services.broadcast.update_broadcast_stats(broadcast_id, success, errors)
	
	# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	result_text = (
		f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
		f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
		f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
		f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}"
	)
	
	await callback.message.answer(
		result_text,
		reply_markup=BroadCastKeyboards.back_to_broadcast()
	)
	
	await state.clear()
	await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
@router.callback_query(F.data.startswith("preview_btn:"))
async def handle_preview_button(
		callback: types.CallbackQuery,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ"""
	try:
		# –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏ –∏–∑ callback_data
		button_id = callback.data.split(":")[1]
		
		# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		data = await state.get_data()
		buttons = data.get('buttons', [])
		
		
		button: Button = list(filter(lambda b: b.id == button_id, buttons))[0]
		
		if not button:
			await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
			return
		
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
		await callback.message.answer(button.value)
		await callback.answer()
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data.startswith("broadcast_textbtn:"))
async def handle_broadcast_text_button(
		callback: types.CallbackQuery,
		services: Services
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö"""
	try:
		_, broadcast_id, button_id = callback.data.split(":")
		broadcast: BroadcastMessage = await services.broadcast.get_broadcast_by_id(int(broadcast_id))
		
		
		button: Button = list(filter(lambda b: b.id == button_id, broadcast.buttons))[0]

		await callback.message.answer(button.value)
		await callback.answer()
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
		await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
@router.callback_query(F.data == "broadcast_history")
async def show_broadcast_history(
		callback: types.CallbackQuery,
		services: Services
):
	"""–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
	broadcasts = await services.broadcast.get_broadcast_history()
	
	if not broadcasts:
		await callback.message.edit_text(
			"üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞",
			reply_markup=BroadCastKeyboards.back_to_broadcast()
		)
		return
	
	text = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
	for broadcast in broadcasts:
		text += (
			f"ID: {broadcast.id}\n"
			f"–î–∞—Ç–∞: {broadcast.sent_at.strftime('%d.%m.%Y %H:%M')}\n"
			f"–£—Å–ø–µ—à–Ω–æ: {broadcast.success_count}/{broadcast.total_users}\n\n"
		)
	
	await callback.message.edit_text(
		text,
		reply_markup=BroadCastKeyboards.broadcast_history(broadcasts)
	)
	await callback.answer()


# –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith("broadcast_details:"))
async def show_broadcast_details(
		callback: types.CallbackQuery,
		services: Services
):
	"""–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
	broadcast_id = int(callback.data.split(":")[1])
	broadcast = await services.broadcast.get_broadcast_by_id(broadcast_id)
	
	if not broadcast:
		await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
		return
	
	text = await services.broadcast.format_broadcast_stats(broadcast)
	
	await callback.message.edit_text(
		text,
		reply_markup=BroadCastKeyboards.broadcast_details(broadcast_id)
	)
	await callback.answer()


# –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@router.callback_query(F.data.startswith("broadcast_repeat:"))
async def repeat_broadcast(
		callback: types.CallbackQuery,
		services: Services
):
	"""–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
	search_broadcast_id = int(callback.data.split(":")[1])
	broadcast = await services.broadcast.get_broadcast_by_id(search_broadcast_id)
	
	if not broadcast:
		await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
		return
	
	
	
	# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users = await services.user.get_users_for_notification()
	total_users = len(users)
	
	broadcast_id = await services.broadcast.save_broadcast(
		text=broadcast.text,
		media_type=broadcast.media_type,
		media_id=broadcast.media_id,
		buttons=broadcast.buttons,
		sent_by=callback.from_user.id,
		total_users=total_users
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	success = 0
	errors = 0
	
	for user in users:
		try:
			buttons = broadcast.buttons
			keyboard = None
			# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			if buttons:
				builder = InlineKeyboardBuilder()
				for btn in buttons:
					if btn.button_type == 'url':
						builder.button(text=btn.text, url=btn.value)
					else:
						builder.button(text=btn.text, callback_data=f"broadcast_textbtn:{broadcast_id}:{btn.id}")
				builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
				keyboard = builder.as_markup()
			
			if broadcast.media_type == 'photo':
				await callback.bot.send_photo(
					chat_id=user.user_id,
					photo=broadcast.media_id,
					caption=broadcast.text,
					reply_markup=keyboard
				)
			elif broadcast.media_type == 'video':
				await callback.bot.send_video(
					chat_id=user.user_id,
					video=broadcast.media_id,
					caption=broadcast.text,
					reply_markup=keyboard
				)
			elif broadcast.media_type == 'document':
				await callback.bot.send_document(
					chat_id=user.user_id,
					document=broadcast.media_id,
					caption=broadcast.text,
					reply_markup=keyboard
				)
			else:
				await callback.bot.send_message(
					chat_id=user.user_id,
					text=broadcast.text,
					reply_markup=keyboard
				)
			success += 1
		except Exception as e:
			logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
			await services.user.set_notification_status(user.user_id, False)
			await services.user.ban_user(user.user_id)
			errors += 1
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	await services.broadcast.update_broadcast_stats(broadcast_id, success, errors)
	
	await callback.message.answer(
		f"‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
		f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
		f"‚Ä¢ –û—à–∏–±–æ–∫: {errors}\n"
		f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}",
		reply_markup=BroadCastKeyboards.back_to_broadcast()
	)
	await callback.answer()
	
	
	

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data.startswith('broadcast_send'))
async def broadcast_send(callback: CallbackQuery, state: FSMContext, services: Services):
	
	search_broadcast_id = int(callback.data.split(":")[1])
	broadcast = await services.broadcast.get_broadcast_by_id(search_broadcast_id)
	
	if not broadcast:
		await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
		return

	try:
		buttons = broadcast.buttons
		keyboard = None
		# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		if buttons:
			builder = InlineKeyboardBuilder()
			for btn in buttons:
				if btn.button_type == 'url':
					builder.button(text=btn.text, url=btn.value)
				else:
					builder.button(text=btn.text, callback_data=f"broadcast_textbtn:{search_broadcast_id}:{btn.id}")
			builder.button(text='–°–∫—Ä—ã—Ç—å', callback_data='delete_this_message')
			builder.adjust(1)
			keyboard = builder.as_markup()
		
		if broadcast.media_type == 'photo':
			await callback.message.answer_photo(
				photo=broadcast.media_id,
				caption=broadcast.text,
				reply_markup=keyboard
			)
		elif broadcast.media_type == 'video':
			await callback.message.answer_video(
				video=broadcast.media_id,
				caption=broadcast.text,
				reply_markup=keyboard
			)
		elif broadcast.media_type == 'document':
			await callback.message.answer_document(
				document=broadcast.media_id,
				caption=broadcast.text,
				reply_markup=keyboard
			)
		else:
			await callback.message.answer(
				text=broadcast.text,
				reply_markup=keyboard
			)
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
	
	await callback.answer()