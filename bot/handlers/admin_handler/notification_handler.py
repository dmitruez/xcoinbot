from aiogram import Router, types, F
from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ...keyboards.admin_keyboard import AdminKeyboards
from ...services import Services
from ...states.admin_states import NotificationStates
from ...utils.loggers import handlers as logger


router = Router(name=__name__)


@router.message(Command('edit_notification'))
@router.callback_query(F.data == "admin_notif")
async def notification_menu(callback: types.CallbackQuery | types.Message, state: FSMContext):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
	state_data = await state.get_data()
	if delete_message := state_data.get("delete_message"):
		try:
			await delete_message.delete()
		except Exception as e:
			pass
		await state.clear()
	
	text = ("üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
	        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
	
	if isinstance(callback, types.CallbackQuery):
		await callback.message.edit_text(
			text=text,
			reply_markup=AdminKeyboards.notification_menu()
		)
		await callback.answer()
	else:
		await callback.answer(
			text=text,
			reply_markup=AdminKeyboards.notification_menu()
		)


@router.callback_query(F.data == "notif_edit_text")
async def edit_text(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	template = await services.notification.get_template()
	await callback.message.edit_text(
		"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
		"‚Ä¢ <code>&title</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
		"‚Ä¢ <code>&link</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
		f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n<pre>{template.text}</pre>",
		reply_markup=AdminKeyboards.back_to_notification()
	)
	await state.set_state(NotificationStates.EDIT_TEXT)
	await callback.answer()


@router.message(NotificationStates.EDIT_TEXT)
async def save_notification_text(message: types.Message, state: FSMContext, services: Services):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	await services.notification.update_text(message.text)
	await state.clear()
	await message.answer("‚úÖ –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data == "notif_edit_media")
async def edit_notif_media(
		callback: types.CallbackQuery,
		state: FSMContext,
		services: Services
):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
	notif_data = await services.notification.get_template()
	has_media = notif_data.media_id is not None
	text = (
			"üñº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
			"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + ("‚úÖ –ú–µ–¥–∏–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ" if has_media else "‚ùå –ú–µ–¥–∏–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n\n"
			                                                                                       "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, "
			                                                                                       "–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è."
	)
	await callback.message.edit_text(
		text,
		reply_markup=AdminKeyboards.adaptive_media_keyboard(has_media, 'notif')
	)
	await state.set_state(NotificationStates.UPLOAD_MEDIA)
	await callback.answer()


@router.message(NotificationStates.UPLOAD_MEDIA, F.content_type.in_({
	ContentType.PHOTO,
	ContentType.VIDEO,
	ContentType.ANIMATION,
	ContentType.DOCUMENT
}))
async def save_notif_media(
		message: types.Message,
		state: FSMContext,
		services: Services
):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ file_id –º–µ–¥–∏–∞
	if message.photo:
		media_type = "photo"
		media_id = message.photo[-1].file_id
	elif message.video:
		media_type = "video"
		media_id = message.video.file_id
	elif message.animation:
		media_type = "animation"
		media_id = message.animation.file_id
	elif message.document:
		media_type = "document"
		media_id = message.document.file_id
	else:
		await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
	await services.notification.update_media(media_type, media_id)
	await message.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
	await state.clear()


@router.callback_query(F.data == "notif_remove_media")
async def remove_welcome_media(
		callback: types.CallbackQuery,
		services: Services
):
	"""–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	await services.welcome.remove_media()
	await callback.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
	await notification_menu(callback, state=None, services=services)


@router.callback_query(F.data == "notif_manage_buttons")
async def manage_notification_buttons(callback: types.CallbackQuery, services: Services):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	template = await services.notification.get_template()
	has_buttons = template.has_buttons()
	
	if not has_buttons:
		text = "‚Ñπ –ö–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
	else:
		button_types = {
			"url": "üåê –°—Å—ã–ª–∫–∞",
			"text": "üí¨ –¢–µ–∫—Å—Ç"
		}
		buttons_list = []
		for i, btn in enumerate(template.buttons):
			btn_type = button_types.get(btn.button_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
			buttons_list.append(f"{i + 1}. {btn.text} ({btn_type})")
		
		text = f"üîò <b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:</b>\n\n" + "\n".join(buttons_list)
	
	await callback.message.edit_text(
		f"üîò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n{text}",
		
		reply_markup=AdminKeyboards.buttons_menu(has_buttons, 'notif')
	)
	await callback.answer()


@router.callback_query(F.data == "notif_add_button")
async def add_button_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	await callback.message.edit_text(
		"üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:",
		reply_markup=AdminKeyboards.button_type_keyboard('notif')
	)
	await state.set_state(NotificationStates.SELECT_BUTTON_TYPE)
	await callback.answer()


@router.callback_query(
	NotificationStates.SELECT_BUTTON_TYPE,
	F.data.in_(["notif_type_url", "notif_type_text"])
)
async def select_button_type(callback: types.CallbackQuery, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
	button_type = "url" if callback.data == "notif_type_url" else "text"
	await state.update_data(button_type=button_type)
	
	back_kb = InlineKeyboardBuilder()
	back_kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="notif_add_button")
	
	await callback.message.edit_text(
		"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:",
		reply_markup=back_kb.as_markup()
	)
	await state.set_state(NotificationStates.WAITING_BUTTON_TEXT)
	await callback.answer()


@router.message(NotificationStates.WAITING_BUTTON_TEXT)
async def add_button_text(message: types.Message, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
	if len(message.text) > 20:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
	
	if len(message.text) < 2:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
	
	await state.update_data(button_text=message.text)
	data = await state.get_data()
	
	if data.get('button_type') == "url":
		await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
		await state.set_state(NotificationStates.WAITING_BUTTON_URL)
	else:
		await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:")
		await state.set_state(NotificationStates.WAITING_BUTTON_CONTENT)


@router.message(NotificationStates.WAITING_BUTTON_URL)
async def add_button_url(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏"""
	data = await state.get_data()
	button_text = data.get('button_text')
	
	# –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
	if not message.text.startswith(('http://', 'https://')):
		return await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
	
	if await services.notification.add_button(
			button_text=button_text,
			button_type='url',
			button_value=message.text
	):
		await message.answer("‚úÖ URL-–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç?)")
	
	await state.clear()


@router.message(NotificationStates.WAITING_BUTTON_CONTENT)
async def add_button_content(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
	# –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
	data = await state.get_data()
	button_text = data.get('button_text')
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
	if await services.notification.add_button(
			button_text=button_text,
			button_type="text",
			button_value=message.text
	):
		await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç?)")
	
	await state.clear()

@router.callback_query(F.data == "notif_remove_button")
async def remove_button_start(callback: types.CallbackQuery, services: Services):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	template = await services.notification.get_template()
	
	if not template.buttons:
		return await callback.answer("‚Ñπ –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
	
	await callback.message.edit_text(
		"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
		reply_markup=AdminKeyboards.remove_buttons(template)
	)
	await callback.answer()


@router.callback_query(F.data.startswith("remove_button_"))
async def remove_button_confirm(callback: types.CallbackQuery, services: Services):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	button_index = int(callback.data.split("_")[2])
	
	if await services.notification.remove_button(button_index):
		await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
	else:
		await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", show_alert=True)
	
	# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
	await manage_notification_buttons(callback, services)


@router.callback_query(F.data == "notif_clear_buttons")
async def clear_buttons(callback: types.CallbackQuery, services: Services):
	"""–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
	await services.notification.clear_buttons()
	await callback.answer("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
	await manage_notification_buttons(callback, services)


@router.callback_query(F.data == "notif_preview")
async def preview_notification(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	
	backup_channel = await services.channel.get_backup_channel()
	if not backup_channel:
		await callback.message.answer(
			f"‚ùå<b>–†–ï–ó–ï–†–í–ù–´–ô –ö–ê–ù–ê–õ –ù–ï –ù–ê–°–¢–†–û–ï–ù</b> ‚ùå\n\n"
			f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
		)
		return
	text, media_type, media_id, buttons = await services.notification.format_message(backup_channel)
	keyboard = await services.notification.format_keyboard(buttons)
	
	await callback.message.delete()
	try:
		await callback.message.answer(
			"üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>",
			reply_markup=AdminKeyboards.back_to_notification()
		)
		user_id = callback.message.chat.id
		msg = await services.notification.send_message(user_id, text, media_type, media_id, keyboard)
		if msg:
			await state.update_data(delete_message=msg)
		await callback.answer()
	except Exception as e:
		await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("notif_textbtn:"))
async def handle_welcome_button(
		callback: types.CallbackQuery,
		services: Services
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
	try:
		button_id = callback.data.split(":", 1)[1]
		
		button = await services.notification.get_button_by_id(button_id)
		
		if not button:
			await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
			return
		
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
		await callback.message.answer(button.value)
		await callback.answer()
		
	
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
		await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
