from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.methods import delete_message

from xcoinbot.bot.keyboards.admin_keyboard import AdminKeyboards
from xcoinbot.bot.services import Services
from xcoinbot.bot.states.admin_states import NotificationStates


router = Router(name=__name__)


@router.message(Command('edit_notification'))
async def redirect_notification_menu(message: types.Message, state: FSMContext):
	await notification_menu(message, state)


@router.callback_query(F.data == "admin_notification")
async def notification_menu(callback: types.CallbackQuery | types.Message, state: FSMContext):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
	state_data = await state.get_data()
	if delete_message := state_data.get("delete_message"):
		await delete_message.delete()
		await state.clear()

	if isinstance(callback, types.CallbackQuery):

		await callback.message.edit_text(
			"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
			"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
			reply_markup=AdminKeyboards.notification_menu()
		)
		await callback.answer()
	else:
		await callback.answer(
			"üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
			"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.",
			reply_markup=AdminKeyboards.notification_menu()
		)


@router.callback_query(F.data == "admin_edit_text")
async def edit_text(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	template = await services.notification.get_template()
	await callback.message.edit_text(
		"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
		"‚Ä¢ <code>&title</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
		"‚Ä¢ <code>&link</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
		"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n<pre>{}</pre>".format(template.text),
		reply_markup=AdminKeyboards.back_to_notification()
	)
	await state.set_state(NotificationStates.EDIT_TEXT)
	await callback.answer()


@router.message(NotificationStates.EDIT_TEXT)
async def save_notification_text(message: types.Message, state: FSMContext, services: Services):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	await services.notification.update_template_text(message.text)
	await state.clear()
	await message.answer("‚úÖ –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")


@router.callback_query(F.data == "admin_manage_buttons")
async def manage_notification_buttons(callback: types.CallbackQuery, services: Services):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
	template = await services.notification.get_template()

	if not template.buttons:
		text = "‚Ñπ –ö–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
	else:
		buttons_list = "\n".join(
			f"{i + 1}. {btn[0]} - {btn[1]}"
			for i, btn in enumerate(template.buttons)
		)
		text = f"üîò <b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:</b>\n\n{buttons_list}"

	await callback.message.edit_text(
		f"üîò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n{text}",

		reply_markup=AdminKeyboards.buttons_menu()
	)
	await callback.answer()


@router.callback_query(F.data == "admin_add_button")
async def add_button_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	await callback.message.edit_text(
		"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:",
		reply_markup=AdminKeyboards.back_to_buttons()
	)
	await state.set_state(NotificationStates.WAITING_BUTTON_TEXT)
	await callback.answer()


@router.message(NotificationStates.WAITING_BUTTON_TEXT)
async def add_button_text(message: types.Message, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
	if len(message.text) > 20:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")

	if len(message.text) < 2:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")

	await state.update_data(button_text=message.text)
	await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
	await state.set_state(NotificationStates.WAITING_BUTTON_URL)


@router.message(NotificationStates.WAITING_BUTTON_URL)
async def add_button_url(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏"""
	data = await state.get_data()
	button_text = data.get('button_text')

	# –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
	if not message.text.startswith(('http://', 'https://')):
		return await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

	if await services.notification.add_template_button(button_text, message.text):
		await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç?)")

	await state.clear()


@router.callback_query(F.data == "admin_remove_button")
async def remove_button_start(callback: types.CallbackQuery, services: Services):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	template = await services.notification.get_template()

	if not template.buttons:
		return await callback.answer("‚Ñπ –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

	await callback.message.edit_text(
		"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
		reply_markup=AdminKeyboards.remove_buttons(template)
	)
	await callback.answer()


@router.callback_query(F.data.startswith("remove_button_"))
async def remove_button_confirm(callback: types.CallbackQuery, services: Services):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	button_index = int(callback.data.split("_")[2])

	if await services.notification.remove_template_button(button_index):
		await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
	else:
		await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", show_alert=True)

	# –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
	await manage_notification_buttons(callback, services)


@router.callback_query(F.data == "admin_clear_buttons")
async def clear_buttons(callback: types.CallbackQuery, services: Services):
	"""–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
	await services.notification.clear_template_buttons()
	await callback.answer("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
	await manage_notification_buttons(callback, services)


@router.callback_query(F.data == "admin_preview_notification")
async def preview_notification(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

	backup_channel = await services.channel.get_backup_channel()
	if not backup_channel:
		await callback.message.answer(
			f"‚ùå<b>–†–ï–ó–ï–†–í–ù–´–ô –ö–ê–ù–ê–õ –ù–ï –ù–ê–°–¢–†–û–ï–ù</b> ‚ùå\n\n"
			f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
		)
		return
	text, keyboard = await services.notification.format_notification(backup_channel)

	await callback.message.delete()
	await callback.message.answer(
		"üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>",
		reply_markup=AdminKeyboards.back_to_notification()
	)
	delete_message = await callback.message.answer(
		text,
		reply_markup=keyboard,
		disable_web_page_preview=True
	)
	await state.update_data(delete_message=delete_message)
	await callback.answer()

@router.callback_query(F.data == "admin_send_notification")
async def send_notification_confirmation(callback: types.CallbackQuery, services: Services):
	"""–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
	await callback.answer("‚ùå –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ùå")
# 	user_count = await services.user.get_users_for_notification()
# 	await callback.message.edit_text(
# 		f"‚úâÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
# 		f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b> (–≤—Å–µ–≥–æ: {user_count}).\n"
# 		"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
#
# 		reply_markup=AdminKeyboards.confirm_send_menu()
# 	)
# 	await callback.answer()
#
#
# @router.callback_query(F.data == "confirm_send")
# async def start_notification(callback: types.CallbackQuery, services: Services):
# 	"""–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
# 	# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
# 	await callback.message.edit_text(
# 		"‚è≥ <b>–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...</b>\n"
# 		"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
# 		parse_mode=ParseMode.HTML
# 	)
#
# 	# –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
# 	success_count = await services.notification.notify_channel_change()
#
# 	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
# 	total_users = await services.user.get_total_users()
# 	await callback.message.edit_text(
# 		f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
# 		f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>\n"
# 		f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: <b>{total_users - success_count}</b>\n"
# 		f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>",
#
# 		reply_markup=AdminKeyboards.back_to_notification()
# 	)
# 	await callback.answer()
