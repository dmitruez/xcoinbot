import html
from typing import List

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ...keyboards.admin_keyboard import AdminKeyboards
from ...models import Admin, ChatDialog
from ...services import Services
from ...states.admin_states import ChatStates


router = Router(name=__name__)


def _format_dialogs(title: str, dialogs: List[ChatDialog]) -> str:
	if not dialogs:
		return title + "\n\nüì≠ –ó–¥–µ—Å—å –ø–æ–∫–∞ –ø—É—Å—Ç–æ."

	lines = [title, ""]
	for index, dialog in enumerate(dialogs, start=1):
		username = f"@{dialog.username}" if dialog.username else "–±–µ–∑ username"
		preview = dialog.last_message.replace('\n', ' ')
		if len(preview) > 60:
			preview = preview[:57] + "..."
		lines.append(
			f"{index}. <b>{html.escape(dialog.full_name)}</b>"
			f" ({username})\n"
			f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ: {dialog.last_at.strftime('%d.%m %H:%M')}"
		)
		if dialog.unread_count:
			lines.append(f"–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: <b>{dialog.unread_count}</b>")
		lines.append(f"–°–æ–æ–±—â–µ–Ω–∏–µ: <i>{html.escape(preview)}</i>\n")
	return "\n".join(lines)


async def _format_history(services: Services, user_id: int) -> str:
	user = await services.user.get_user_by_id(user_id)
	header_name = html.escape(user.full_name if user else str(user_id))
	header_username = f" (@{user.username})" if user and user.username else ""
	messages = await services.chat.get_history(user_id)

	lines = [
		f"üí¨ <b>–î–∏–∞–ª–æ–≥ —Å {header_name}</b>{header_username}",
		f"ID: <code>{user_id}</code>",
		""
	]

	if not messages:
		lines.append("–°–æ–æ–±—â–µ–Ω–∏–π –µ—â—ë –Ω–µ –±—ã–ª–æ.")
		return "\n".join(lines)

	admin_names: dict[int, str] = {}
	for message in messages:
		time_label = message.created_at.strftime('%d.%m %H:%M')
		if message.sender == 'user':
			sender = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
		else:
			if message.admin_id and message.admin_id not in admin_names:
				admin = await services.admin.get_admin(message.admin_id)
				admin_names[message.admin_id] = admin.full_name if admin else f"–ê–¥–º–∏–Ω {message.admin_id}"
			sender = f"üëë {admin_names.get(message.admin_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}"
		text = html.escape(message.message)
		lines.append(f"<code>{time_label}</code> {sender}\n{text}\n")

	return "\n".join(lines)


@router.callback_query(F.data == "admin_messages")
async def open_messages_menu(callback: types.CallbackQuery, state: FSMContext):
	await state.set_state(ChatStates.LIST)
	await callback.message.edit_text(
		"üí¨ <b>–î–∏–∞–ª–æ–≥–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
		reply_markup=AdminKeyboards.messages_menu()
	)
	await callback.answer()


@router.callback_query(F.data == "admin_messages_unread")
async def show_unread_dialogs(callback: types.CallbackQuery, services: Services):
	dialogs = await services.chat.get_unread_dialogs()
	text = _format_dialogs("üì• <b>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏</b>", dialogs)
	markup = AdminKeyboards.dialogs_list(dialogs, "admin_messages_open") if dialogs else AdminKeyboards.messages_menu()
	await callback.message.edit_text(text, reply_markup=markup)
	await callback.answer()


@router.callback_query(F.data == "admin_messages_recent")
async def show_recent_dialogs(callback: types.CallbackQuery, services: Services):
	dialogs = await services.chat.get_recent_dialogs()
	text = _format_dialogs("üïò <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏</b>", dialogs)
	markup = AdminKeyboards.dialogs_list(dialogs, "admin_messages_open") if dialogs else AdminKeyboards.messages_menu()
	await callback.message.edit_text(text, reply_markup=markup)
	await callback.answer()


@router.callback_query(F.data.startswith("admin_messages_open_"))
async def open_dialog(callback: types.CallbackQuery, state: FSMContext, services: Services):
	try:
		user_id = int(callback.data.split('_')[-1])
	except (ValueError, IndexError):
		await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
		return

	dialog_text = await _format_history(services, user_id)
	await services.chat.mark_read(user_id)
	await state.update_data(chat_user_id=user_id)
	await state.set_state(ChatStates.LIST)
	await callback.message.edit_text(
		dialog_text,
		reply_markup=AdminKeyboards.chat_dialog_controls(user_id)
	)
	await callback.answer()


@router.callback_query(F.data.startswith("admin_messages_reply_"))
async def start_reply(callback: types.CallbackQuery, state: FSMContext, services: Services):
	try:
		user_id = int(callback.data.split('_')[-1])
	except (ValueError, IndexError):
		await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
		return

	user = await services.user.get_user_by_id(user_id)
	if not user:
		await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	await state.set_state(ChatStates.WAITING_REPLY)
	await state.update_data(chat_user_id=user_id)
	await callback.message.answer(
		"‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
		f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: <code>{user.user_id}</code>)",
		reply_markup=AdminKeyboards.chat_reply_cancel(user_id)
	)
	await callback.answer()


@router.message(ChatStates.WAITING_REPLY)
async def send_reply(message: types.Message, state: FSMContext, services: Services, admin: Admin | None = None):
	data = await state.get_data()
	user_id = data.get('chat_user_id')
	if not user_id:
		await message.answer("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω")
		await state.clear()
		return

	text = (message.text or '').strip()
	if not text:
		await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return

	if not admin:
		admin = await services.admin.get_admin(message.from_user.id)

	if not admin:
		await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
		await state.clear()
		return

	is_sent = await services.chat.send_reply(admin.user_id, user_id, text)

	if not is_sent:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
		return

	await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

	dialog_text = await _format_history(services, user_id)
	await message.answer(
		dialog_text,
		reply_markup=AdminKeyboards.chat_dialog_controls(user_id)
	)
	await state.set_state(ChatStates.LIST)