from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext

from ...keyboards.admin_keyboard import AdminKeyboards
from ...models import Admin
from ...services import Services
from ...states.admin_states import UserStates
from ...utils.paginator import Paginator


router = Router(name=__name__)

@router.message(Command('ban'))
async def admin_ban_user(message: types.Message,  command: CommandObject, services: Services):
	"""–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	if not command.args:
		await message.answer(
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ban –≤–º–µ—Å—Ç–µ —Å ID\n\n"
			"–ü—Ä–∏–º–µ—Ä: /ban 123456"
		)
		return
	if not command.args.isdigit():
		await message.delete()
		await message.answer(
			"‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
		)
		return
	user_id = int(command.args)
	await services.user.set_notification_status(user_id, False)
	user = await services.user.get_user_by_id(user_id)

	admin = await services.admin.get_admin(message.from_user.id)
	access_level = admin.level if admin else 0

	user_info, is_admin, level = await services.user.format_user_info(user)
	await message.answer(
		"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n\n" + user_info,

		reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
	)


@router.message(Command('unban'))
async def admin_unban_user(message: types.Message, command: CommandObject, services: Services):
	"""–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	if not command.args:
		await message.answer(
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /unban –≤–º–µ—Å—Ç–µ —Å ID\n\n"
			"–ü—Ä–∏–º–µ—Ä: /ban 123456"
		)
		return
	if not command.args.isdigit():
		await message.delete()
		await message.answer(
			"‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
		)
		return
	user_id = int(command.args)
	await services.user.set_notification_status(user_id, True)
	user = await services.user.get_user_by_id(user_id)

	admin = await services.admin.get_admin(message.from_user.id)
	access_level = admin.level if admin else 0

	user_info, is_admin, level = await services.user.format_user_info(user)
	await message.answer(
		"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n\n" + user_info,
		reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
	)



@router.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery, state: FSMContext):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
	await callback.message.edit_text(
		"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		reply_markup=AdminKeyboards.users_menu()
	)
	await state.set_state(UserStates.USERS)
	await callback.answer()


@router.callback_query(F.data == "admin_search_user", UserStates.USERS)
async def admin_search_user(callback: types.CallbackQuery):
	"""–ú–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	await callback.message.edit_text(
		"üë§ <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
		"–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ –≤–µ—Å—å @username/–Ω–∏–∫–Ω–µ–π–º, –±–æ—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		reply_markup=AdminKeyboards.search_menu()
	)

	await callback.answer()


@router.callback_query(F.data == "admin_search_username")
async def search_by_username_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ username"""
	await callback.message.edit_text(
		"üîç <b>–ü–æ–∏—Å–∫ –ø–æ username</b>\n\n"
		"–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å username (–±–µ–∑ @):",

		reply_markup=AdminKeyboards.cancel_search()
	)
	await state.set_state(UserStates.WAITING_QUERY)
	await state.update_data(search_type="username")
	await callback.answer()


@router.callback_query(F.data == "admin_search_nickname")
async def search_by_nickname_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ nickname"""
	await callback.message.edit_text(
		"üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏</b>\n\n"
		"–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏:",

		reply_markup=AdminKeyboards.cancel_search()
	)
	await state.set_state(UserStates.WAITING_QUERY)
	await state.update_data(search_type="nickname")
	await callback.answer()


@router.callback_query(F.data == "admin_search_id")
async def search_by_id_start(callback: types.CallbackQuery, state: FSMContext):
	"""–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID"""
	await callback.message.edit_text(
		"üîç <b>–ü–æ–∏—Å–∫ –ø–æ ID</b>\n\n"
		"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",

		reply_markup=AdminKeyboards.cancel_search()
	)
	await state.set_state(UserStates.WAITING_QUERY)
	await state.update_data(search_type="id")
	await callback.answer()


@router.message(UserStates.WAITING_QUERY)
async def handle_search_query(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
	data = await state.get_data()
	search_type = data.get("search_type")
	query = message.text.strip()

	if not query:
		await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return

	# –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
	users = await services.user.search_users(search_type, query)

	if not users:
		await message.answer("üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		await state.clear()
		return

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if len(users) == 1:
		admin = await services.admin.get_admin(message.from_user.id)
		access_level = admin.level if admin else 0

		# –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		user_info, is_admin, level = await services.user.format_user_info(users[0])
		await message.answer(
			user_info,
			reply_markup=AdminKeyboards.profile_menu(users[0], is_admin, level, access_level=access_level)
		)

	else:
		# –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
		users_list = "\n".join(
			f"{i + 1}. @{u.username} - {u.full_name} (ID: <code>{u.user_id}</code>)"
			for i, u in enumerate(users[:10])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		)
		await message.answer(
			f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
			f"{users_list}\n\n"
			"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
			reply_markup=AdminKeyboards.back_to_search()
		)
	await state.set_state(UserStates.WAITING_ID)


@router.message(F.text.regexp(r'^\d+$'), UserStates.WAITING_ID)
async def handle_user_id_input(message: types.Message, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	if not message.text.isdigit():
		await message.delete()
		await message.answer(
			f"‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–π id"
		)
		return

	user_id = int(message.text)
	user = await services.user.get_user_by_id(user_id)

	admin = await services.admin.get_admin(message.from_user.id)
	access_level = admin.level if admin else 0

	if not user:
		await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return

	user_info, is_admin, level = await services.user.format_user_info(user)
	await message.answer(
		user_info,
		reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
	)


# –î–û–†–ê–ë–û–¢–ê–¢–¨ –ï–°–õ–ò –ü–û–ù–ê–î–û–ë–ò–¢–°–Ø
@router.callback_query(F.data == "admin_users_list")
async def get_users_list(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
	await callback.answer("‚ùå –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚ùå")
# 	users = await services.user.users_list()
#
# 	if not users:
# 		await callback.answer("‚Ñπ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
# 		return
#
# 	paginator = Paginator(users, per_page=6)
# 	page = paginator.get_page(1)
#
# 	buttons = [
# 		(f" {us.full_name if us.full_name else }", f"select_{us.user_id}")
# 		for us in page.items
# 	]
#
# 	await callback.message.edit_text(
# 		"üü¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> üü¢",
#
# 		reply_markup=AdminKeyboards().users_list(
# 			users=buttons,
# 			current_page=page.page,
# 			total_pages=page.total_pages,
# 			prefix='user'
# 		)
# 	)
# 	await state.set_state(UserStates.CHOOSE_USER)
# 	await callback.answer()
#
#
# @router.callback_query(F.data.startswith("select_"))
# async def get_user_profile(callback: types.CallbackQuery, services: Services):
# 	"""–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
# 	user_id = int(callback.data.split("_")[1])
# 	user = await services.user.get_user_by_id(user_id)
#
# 	if not user:
# 		await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
# 		return
#
# 	user_link = f"<a href='tg://user?id={user_id}'>{user.full_name}</a>\n"
# 	await callback.message.answer(
# 		f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else user_link}\n"
# 		f"üÜî ID: <code>{user_id}</code>\n"
# 		f"üë§ –ò–º—è: {user.full_name}\n"
# 		f"üîí –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
# 		f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if user.should_notify else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}",
#
# 		reply_markup=AdminKeyboards.profile_menu(user)
# 	)



@router.callback_query(F.data.startswith("admin_ban_"))
async def ban_user(callback: types.CallbackQuery, services: Services, admin: Admin):
	"""–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = int(callback.data.split("_")[2])
	access_level = admin.level if admin else 0

	if await services.user.set_notification_status(user_id, False):
		user = await services.user.get_user_by_id(user_id)
		user_info, is_admin, level = await services.user.format_user_info(user)
		await callback.message.edit_text(
			"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n\n" + user_info,
			reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("admin_unban_"))
async def unban_user(callback: types.CallbackQuery, services: Services, admin: Admin):
	"""–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = int(callback.data.split("_")[2])
	access_level = admin.level if admin else 0

	if await services.user.set_notification_status(user_id, True):
		user = await services.user.get_user_by_id(user_id)
		user_info, is_admin, level = await services.user.format_user_info(user)
		await callback.message.edit_text(
			"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n\n" + user_info,
			reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–≤–µ–ª–æ–º–ª–µ–Ω–∏–π", show_alert=True)


@router.callback_query(F.data.startswith("admin_grant_"))
async def grant_admin_handler(callback: types.CallbackQuery, services: Services, admin: Admin):
	"""–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
	user_id = int(callback.data.split("_")[2])
	user = await services.user.get_user_by_id(user_id)

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
	access_level = admin.level if admin else 0
	if access_level < 2:
		await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
		return

	new_admin = Admin(
		user_id=user_id,
		username=user.username,
		full_name=user.full_name,
		level=1
	)

	if await services.admin.add_admin(new_admin):
		await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")

		# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		user_info, is_admin, level = await services.user.format_user_info(user)

		await callback.message.edit_text(
			user_info,
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞", show_alert=True)


@router.callback_query(F.data.startswith("admin_revoke_"))
async def revoke_admin_handler(callback: types.CallbackQuery, services: Services, admin: Admin):
	"""–°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
	user_id = int(callback.data.split("_")[2])


	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
	access_level = admin.level if admin else 0
	if access_level < 2:
		await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
		return

	if await services.admin.remove_admin(user_id):
		await callback.answer("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã!")

		# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		user = await services.user.get_user_by_id(user_id)
		user_info, is_admin, level = await services.user.format_user_info(user)

		await callback.message.edit_text(
			user_info,
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∞–≤", show_alert=True)


@router.callback_query(F.data.startswith("admin_setlevel_"))
async def set_admin_level_handler(callback: types.CallbackQuery, services: Services, admin: Admin):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
	parts = callback.data.split("_")
	user_id = int(parts[2])
	level = int(parts[3])

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
	access_level = admin.level if admin else 0
	if access_level < 2:
		await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", show_alert=True)
		return


	if await services.admin.update_admin_level(user_id, level):
		await callback.answer(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")

		# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		user = await services.user.get_user_by_id(user_id)
		user_info, is_admin, level = await services.user.format_user_info(user)

		await callback.message.edit_text(
			user_info,
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards.profile_menu(user, is_admin, level, access_level=access_level)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è", show_alert=True)