from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from xcoinbot.bot.keyboards.admin_keyboard import AdminKeyboards
from xcoinbot.bot.services import Services
from xcoinbot.bot.states.admin_states import UserStates
from xcoinbot.bot.utils.paginator import Paginator


router = Router(name=__name__)


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: types.CallbackQuery, state: FSMContext):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
	await callback.message.edit_text(
		"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.users_menu()
	)
	await state.set_state(UserStates.USERS)
	await callback.answer()


@router.callback_query(F.data == "admin_ban")
async def admin_ban_menu(callback: types.CallbackQuery):
	"""–ú–µ–Ω—é –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
	await callback.message.edit_text(
		"üî® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏</b>\n\n"
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.back_to_main()
	)
	await callback.answer()


@router.callback_query(F.data == "admin_users_list")
async def get_users_list(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
	users = await services.user.users_list()

	if not users:
		await callback.answer("‚Ñπ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
		return

	paginator = Paginator(users, per_page=6)
	page = paginator.get_page(1)

	buttons = [
		(f" {us.full_name}", f"select_{us.user_id}")
		for us in page.items
	]

	await callback.message.edit_text(
		"üü¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> üü¢",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards().users_list(
			users=buttons,
			current_page=page.page,
			total_pages=page.total_pages,
			prefix='user'
		)
	)
	await state.set_state(UserStates.CHOOSE_USER)
	await callback.answer()


@router.callback_query(F.data.startswith("select_"))
async def get_user_profile(callback: types.CallbackQuery, services: Services):
	"""–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = int(callback.data.split("_")[1])
	user = await services.user.get_user(user_id)

	if not user:
		await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	user_link = f"<a href='tg://user?id={user_id}'>{user.full_name}</a>\n"
	await callback.message.answer(
		f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else user_link}\n"
		f"üÜî ID: <code>{user_id}</code>\n"
		f"üë§ –ò–º—è: {user.full_name}\n"
		f"üîí –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
		f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'üü¢ –í–∫–ª—é—á–µ–Ω—ã' if user.is_active else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω—ã'}",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.profile_menu(user)
	)


@router.message(F.text.regexp(r'^\d+$'), UserStates.USERS)
async def process_user_id(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
	user_id = int(message.text)

	user = await services.user.get_user(user_id)
	if not user:
		return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

	await state.update_data(target_user_id=user_id)
	user_link = f"<a href='tg://user?id={user_id}'>{user.full_name}</a>\n"
	await message.answer(
		f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username if user.username else user_link}"
		f"üÜî ID: <code>{user_id}</code>\n"
		f"üë§ –ò–º—è: {user.full_name}\n"
		f"üîí –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.is_active else 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.ban_menu(user_id, user.is_banned)
	)


@router.callback_query(F.data.startswith("admin_ban_"))
async def ban_user(callback: types.CallbackQuery, services: Services):
	"""–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = int(callback.data.split("_")[2])

	if await services.user.ban_user(user_id):
		user = await services.user.get_user(user_id)
		await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
		await callback.message.edit_reply_markup(
			reply_markup=AdminKeyboards.profile_menu(user)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)


@router.callback_query(F.data.startswith("admin_unban_"))
async def unban_user(callback: types.CallbackQuery, services: Services):
	"""–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
	user_id = int(callback.data.split("_")[2])

	if await services.user.unban_user(user_id):
		await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
		await callback.message.edit_reply_markup(
			reply_markup=AdminKeyboards.ban_menu(user_id, False)
		)
	else:
		await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)
