from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION, LEAVE_TRANSITION
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatMemberUpdated

from xcoinbot.bot.keyboards.admin_keyboard import AdminKeyboards
from xcoinbot.bot.models import Channel
from xcoinbot.bot.services import Services
from xcoinbot.bot.states.admin_states import ChannelsStates
from xcoinbot.bot.utils.paginator import Paginator


router = Router(name=__name__)


@router.callback_query(F.data == "admin_channels")
async def admin_channels(callback: types.CallbackQuery, state: FSMContext):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
	await callback.message.edit_text(
		"üì¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n"
		"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.channels_menu()
	)
	await state.set_state(ChannelsStates.CHANNELS)
	await callback.answer()


@router.callback_query(F.data == "admin_change_main")
async def start_select_main_channel(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
	channels = await services.channel.get_channel_list()
	if not channels:
		await callback.answer("‚Ñπ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", show_alert=True)
		return

	paginator = Paginator(channels, per_page=6)
	page = paginator.get_page(1)

	buttons = [
		(f"üì¢ {ch.title}", f"select_main_{ch.channel_id}")
		for ch in page.items
	]

	main_channel = await services.channel.get_main_channel()
	if main_channel:
		await callback.message.edit_text(
			"üü¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:</b> üü¢\n\n"
			f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <a src='{main_channel.link}'>{main_channel.title}</a>\n\n",
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards().channels_list(
				buttons,
				page.page,
				page.total_pages,
				"main"
			)
		)
	else:
		await callback.message.edit_text(
			"üü¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:</b> üü¢\n\n"
			"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <b>–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù</b>",
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards().channels_list(
				buttons,
				page.page,
				page.total_pages,
				"main"
			)
		)
	await state.set_state(ChannelsStates.EDIT_MAIN_CHANNEL)
	await callback.answer()


@router.callback_query(F.data.startswith("select_main_"))
async def set_main_channel(callback: types.CallbackQuery, services: Services):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
	channel_id = int(callback.data.split("_")[2])
	channel = await services.channel.get_channel(channel_id)

	if not channel:
		await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	await services.channel.set_main_channel(channel_id)
	await callback.message.edit_text(
		f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{channel.title}</b>",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.back_to_main()
	)
	await callback.answer()


@router.callback_query(F.data == "admin_change_backup")
async def start_select_backup_channel(callback: types.CallbackQuery, state: FSMContext, services: Services):
	"""–ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
	channels = await services.channel.get_channel_list()
	if not channels:
		await callback.answer("‚Ñπ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", show_alert=True)
		return

	paginator = Paginator(channels, per_page=6)
	page = paginator.get_page(1)

	buttons = [
		(f"üì¢ {ch.title}", f"select_backup_{ch.channel_id}")
		for ch in page.items
	]

	backup_channel = await services.channel.get_backup_channel()
	if backup_channel:
		await callback.message.edit_text(
			"üî∂ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª:</b> üî∂\n\n"
			f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <a src='{backup_channel.link}'>{backup_channel.title}</a>",
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards().channels_list(
				buttons,
				page.page,
				page.total_pages,
				"backup"
			)
		)
	else:
		await callback.message.edit_text(
			"üî∂ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª:</b> üî∂\n\n"
			f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: <b>–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù</b>",
			parse_mode=ParseMode.HTML,
			reply_markup=AdminKeyboards().channels_list(
				buttons,
				page.page,
				page.total_pages,
				"backup"
			)
		)
	await state.set_state(ChannelsStates.EDIT_BACKUP_CHANNEL)
	await callback.answer()


@router.callback_query(F.data.startswith("select_backup_"))
async def set_backup_channel(callback: types.CallbackQuery, services: Services):
	"""–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
	channel_id = int(callback.data.split("_")[2])
	channel = await services.channel.get_channel(channel_id)

	if not channel:
		await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	await services.channel.set_backup_channel(channel_id)
	await callback.message.edit_text(
		f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{channel.title}</b>",
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards.back_to_main()
	)
	await callback.answer()


@router.callback_query(F.data.regexp(r"^(main|backup)_page_\d+$"))
async def paginate_channels(callback: types.CallbackQuery, services: Services, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
	parts = callback.data.split("_")
	prefix = parts[0]
	page_num = int(parts[2])

	channels = await services.channel.get_channel_list()
	paginator = Paginator(channels, per_page=6)
	page = paginator.get_page(page_num)

	if prefix == "main":
		buttons = [(f"üì¢ {ch.title}", f"select_main_{ch.channel_id}") for ch in page.items]
		await state.set_state(ChannelsStates.EDIT_MAIN_CHANNEL)
		text = "üü¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:</b> üü¢"
	else:
		buttons = [(f"üì¢ {ch.title}", f"select_backup_{ch.channel_id}") for ch in page.items]
		await state.set_state(ChannelsStates.EDIT_BACKUP_CHANNEL)
		text = "üî∂ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª:</b> üî∂"

	await callback.message.edit_text(
		text,
		parse_mode=ParseMode.HTML,
		reply_markup=AdminKeyboards().channels_list(
			buttons,
			page.page,
			page.total_pages,
			prefix
		)
	)
	await callback.answer()


@router.my_chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def handle_bot_added_to_channel(update: ChatMemberUpdated, state: FSMContext, bot: Bot, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É"""
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–∞–Ω–∞–ª (–Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ —á–∞—Ç)
	if update.chat.type != ChatType.CHANNEL:
		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª –∏–º–µ–Ω–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞
	admin = await services.admin.get_admin(update.from_user.id)
	if admin.level < 2:
		return

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç–∞ –∏–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ (–Ω–µ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
	channel = Channel(
		channel_id=update.chat.id,
		title=update.chat.title,
		username=update.chat.username,
		is_main=False,
		is_backup=False
	)

	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ
	existing_channel = await services.channel.get_channel(channel.channel_id)
	if not existing_channel:
		await services.channel.add_new_channel(channel)
	await bot.send_message(
		chat_id=2048360747,
		text=f"ü§ñ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª!\n"
			 f"–ù–∞–∑–≤–∞–Ω–∏–µ: {channel.title}\n"
			 f"ID: {channel.channel_id}\n\n"
			 f"<b>–¢–µ–ø–µ—Ä—å –∫–ª–∏–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ üëá</b>",
		reply_markup=AdminKeyboards.send_link(channel_id=channel.channel_id)
	)


@router.callback_query(F.data.startswith("admin_link_channel_"))
async def add_link(callback: types.CallbackQuery, state: FSMContext, services: Services):
	channel_id = int(callback.data.split('_')[3])
	channel = await services.channel.get_channel(channel_id)
	await callback.message.edit_reply_markup(reply_markup=AdminKeyboards.send_link(waiting=True))
	await state.update_data(channel=channel, clbk_message=callback.message)
	await state.set_state(ChannelsStates.ADD_LINK)


@router.message(F.text, ChannelsStates.ADD_LINK)
async def adding_channel_link(message: types.Message, state: FSMContext, services: Services):
	data = await state.get_data()
	channel: Channel = data["channel"]
	clbk_message = data["clbk_message"]
	link = message.text
	channel.link = link
	await services.channel.update_channel(channel)
	await message.delete()
	await clbk_message.edit_reply_markup(reply_markup=AdminKeyboards.send_link(success=True))
	await state.clear()


@router.my_chat_member(ChatMemberUpdatedFilter(LEAVE_TRANSITION))
async def leave_channel(update: ChatMemberUpdated, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ"""
	# –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã
	if update.chat.type != ChatType.CHANNEL:
		return

	new_status = update.new_chat_member.status

	# –ö–∞–Ω–∞–ª –±—ã–ª —É–¥–∞–ª–µ–Ω (–±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –∫–∞–Ω–∞–ª –∏—Å—á–µ–∑)
	if new_status in ('left', 'kicked'):
		channel = await services.channel.get_channel(update.chat.id)
		if not channel:
			return

		_, super_admins = await services.admin.list_admins()
		# –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª
		if channel.is_main:
			backup_channel = await services.channel.get_backup_channel()
			if backup_channel:
				# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Å–Ω–æ–≤–Ω—ã–º
				await services.channel.set_main_channel(backup_channel.channel_id)

				# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
				data = await services.notification.notify_channel_change(
					new_channel=backup_channel
				)

				for admin in super_admins:
					try:
						await update.bot.send_message(
							admin.user_id,
							f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª {channel.title} –±—ã–ª —É–¥–∞–ª–µ–Ω!\n"
							f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {backup_channel.title}\n"
							f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {data['success']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
							f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data['failures']}"
						)
					except Exception:
						continue

			# –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
			# for admin_id in Config.DEVELOPERS_IDS:
			# 	try:
			# 		await update.bot.send_message(
			# 			admin_id,
			# 			f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª {channel.title} –±—ã–ª —É–¥–∞–ª–µ–Ω!\n"
			# 			f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {backup_channel.title}\n"
			# 			f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {data['success']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
			# 			f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {data['failures']}"
			# 		)
			# 	except Exception:
			# 		continue

			else:
				# –ù–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ - —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
				for admin in super_admins:
					try:
						await update.bot.send_message(
							admin.user_id,
							f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï!\n"
							f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª {channel.title} –±—ã–ª —É–¥–∞–ª–µ–Ω, "
							f"–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
							f"–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!"
						)
					except Exception:
						continue

			# for admin_id in Config.DEVELOPERS_IDS:
			# 	try:
			# 		await update.bot.send_message(
			# 			admin_id,
			# 			f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–ë–´–¢–ò–ï!\n"
			# 			f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª {channel.title} –±—ã–ª —É–¥–∞–ª–µ–Ω, "
			# 			f"–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
			# 			f"–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!"
			# 		)
			# 	except Exception:
			# 		continue

		# –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ –ë–î
		await services.channel.delete_channel(channel)
