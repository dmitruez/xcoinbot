from datetime import datetime

from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ...keyboards.admin_keyboard import AdminKeyboards
from ...services import Services
from ...states.admin_states import StatsStates


router = Router(name=__name__)


@router.message(Command('stats'))
async def redirect_admin_stats(message: types.Message, services: Services):
	await admin_stats(message, services)




@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery | types.Message, services: Services):
	"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
	stats = await services.admin.get_stats()

	text = (
		"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
		f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>\n"
		f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{stats['active_users']}</code>\n"
		f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <code>{stats['banned_users']}</code>\n\n"
		f"üì¢ –ö–∞–Ω–∞–ª–æ–≤: <code>{stats['channels_count']}</code>\n"
		f"üî∑ –û—Å–Ω–æ–≤–Ω–æ–π: {stats['main_channel']}\n"
		f"üî∂ –†–µ–∑–µ—Ä–≤–Ω—ã–π: {stats['backup_channel']}"
	)

	if isinstance(callback, types.CallbackQuery):
		await callback.message.edit_text(
			text,
			reply_markup=AdminKeyboards.back_to_main()
		)
		await callback.answer()
	else:
		await callback.answer(
			text,
			reply_markup=AdminKeyboards.back_to_main()
		)


@router.callback_query(F.data == "admin_stats_period")
async def request_stats_period(callback: types.CallbackQuery, state: FSMContext):
	"""–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
	await callback.message.edit_text(
		"üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n\n"
		"–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",

		reply_markup=AdminKeyboards.back_to_main()
	)
	await state.set_state(StatsStates.WAITING_START_DATE)
	await callback.answer()


@router.message(StatsStates.WAITING_START_DATE)
async def process_start_date(message: types.Message, state: FSMContext):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
	try:
		start_date = datetime.strptime(message.text, "%Y-%m-%d")
		await state.update_data(start_date=start_date)
		await message.answer(
			"–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
			reply_markup=AdminKeyboards.back_to_main()
		)
		await state.set_state(StatsStates.WAITING_END_DATE)
	except ValueError:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")


@router.message(StatsStates.WAITING_END_DATE)
async def process_end_date(message: types.Message, state: FSMContext, services: Services):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
	try:
		end_date = datetime.strptime(message.text, "%Y-%m-%d")
		data = await state.get_data()
		start_date = data['start_date']

		stats = await services.admin.get_period_stats(start_date, end_date)

		text = (
			f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n"
			f"üìÖ {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}\n\n"
			f"üë§ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['new_users']}</code>\n"
			f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['active_users']}</code>\n"
			f"üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: <code>{stats['banned_users']}</code>\n"
			f"üì¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤: <code>{stats['channel_changes']}</code>\n"
			f"‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{stats['notifications_sent']}</code>"
		)

		await message.answer(text, parse_mode=ParseMode.HTML)
		await state.clear()
	except ValueError:
		await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
