from aiogram import Router, types, F
from aiogram.types import ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ...keyboards.admin_keyboard import AdminKeyboards
from ...services import Services
from ...states.admin_states import WelcomeStates
from ...utils.loggers import handlers as logger


router = Router(name=__name__)


# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@router.message(Command('edit_welcome'))
@router.callback_query(F.data == "admin_welcome")
async def welcome_menu(
		callback: types.CallbackQuery | types.Message,
		state: FSMContext | None,
		services: Services
):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
	# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	state_data = await state.get_data()
	if delete_message := state_data.get("delete_message"):
		try:
			await delete_message.delete()
		except:
			pass
		await state.clear()
	
	text = (
		"üëã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>\n\n"
		"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∏–¥—è—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."
	)
	
	
	# –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if isinstance(callback, types.CallbackQuery):
		await callback.message.edit_text(
			text,
			reply_markup=AdminKeyboards.admin_welcome()
		)
		await callback.answer()
	else:
		await callback.answer(
			text,
			reply_markup=AdminKeyboards.admin_welcome()
		)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.callback_query(F.data == "welcome_edit_text")
async def edit_welcome_text(
		callback: types.CallbackQuery,
		state: FSMContext,
		services: Services
):
	"""–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	welcome_data = await services.welcome.get_welcome_data()
	
	# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
	back_kb = InlineKeyboardBuilder()
	back_kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_welcome")
	
	await callback.message.edit_text(
		"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n"
		"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.\n"
		"–í–æ–∑–¥–µ—Ä–∂–∏—Ç–µ—Å—å –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö <> –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ –∫–∞–∫ —Ç–µ–≥ html\n"
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
		"<code>&link</code> - –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n"
		"<code>&title</code> - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n\n"
		f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n<pre>{welcome_data.get('text', '')}</pre>",
		reply_markup=back_kb.as_markup()
	)
	await state.set_state(WelcomeStates.EDIT_TEXT)
	await callback.answer()


@router.message(WelcomeStates.EDIT_TEXT)
async def save_welcome_text(
		message: types.Message,
		state: FSMContext,
		services: Services
):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	await services.welcome.update_text(message.text)
	await state.clear()
	await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
@router.callback_query(F.data == "welcome_edit_media")
async def edit_welcome_media(
		callback: types.CallbackQuery,
		state: FSMContext,
		services: Services
):
	"""–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞"""
	welcome_data = await services.welcome.get_welcome_data()
	has_media = welcome_data.get('media_file_id') is not None
	
	text = (
			"üñº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</b>\n\n"
			"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: " + ("‚úÖ –ú–µ–¥–∏–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ" if has_media else "‚ùå –ú–µ–¥–∏–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") + "\n\n"
			                                                                                       "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, "
			                                                                                       "–ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è."
	)
	
	# –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	kb_builder = InlineKeyboardBuilder()
	if has_media:
		kb_builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞", callback_data="welcome_remove_media")
	kb_builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_welcome")
	kb_builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
	
	await callback.message.edit_text(
		text,
		reply_markup=kb_builder.as_markup()
	)
	await state.set_state(WelcomeStates.UPLOAD_MEDIA)
	await callback.answer()


@router.message(WelcomeStates.UPLOAD_MEDIA, F.content_type.in_({
	ContentType.PHOTO,
	ContentType.VIDEO,
	ContentType.ANIMATION,
	ContentType.DOCUMENT
}))
async def save_welcome_media(
		message: types.Message,
		state: FSMContext,
		services: Services
):
	"""–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ file_id –º–µ–¥–∏–∞
	if message.photo:
		media_type = "photo"
		media_file_id = message.photo[-1].file_id
	elif message.video:
		media_type = "video"
		media_file_id = message.video.file_id
	elif message.animation:
		media_type = "animation"
		media_file_id = message.animation.file_id
	elif message.document:
		media_type = "document"
		media_file_id = message.document.file_id
	else:
		await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
		return
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞
	await services.welcome.update_media(media_type, media_file_id)
	await message.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
	await state.clear()


@router.callback_query(F.data == "welcome_remove_media")
async def remove_welcome_media(
		callback: types.CallbackQuery,
		services: Services
):
	"""–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	await services.welcome.remove_media()
	await callback.answer("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
	await welcome_menu(callback, state=None, services=services)


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.callback_query(F.data == "welcome_manage_buttons")
async def manage_welcome_buttons(
		callback: types.CallbackQuery,
		services: Services
):
	"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
	welcome_data = await services.welcome.get_welcome_data()
	buttons = welcome_data.get('buttons', [])
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
	button_types = {
		"url": "üåê –°—Å—ã–ª–∫–∞",
		"text": "üí¨ –¢–µ–∫—Å—Ç"
	}
	
	if not buttons:
		text = "‚Ñπ –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
	else:
		buttons_list = []
		for i, btn in enumerate(buttons):
			btn_type = button_types.get(btn.get('type', 'url'), "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
			buttons_list.append(f"{i + 1}. {btn['text']} ({btn_type})")
		
		text = f"üîò <b>–¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏:</b>\n\n" + "\n".join(buttons_list)
	
	# –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	kb_builder = InlineKeyboardBuilder()
	kb_builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="welcome_add_button")
	
	if buttons:
		kb_builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="welcome_remove_button")
		kb_builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="welcome_clear_buttons")
	
	kb_builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_welcome")
	kb_builder.adjust(1, 2 if buttons else 1, 1)  # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞
	
	await callback.message.edit_text(
		f"üîò <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è</b>\n\n{text}",
		reply_markup=kb_builder.as_markup()
	)
	await callback.answer()


@router.callback_query(F.data == "welcome_add_button")
async def add_button_start(
		callback: types.CallbackQuery,
		state: FSMContext
):
	"""–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏: –≤—ã–±–æ—Ä —Ç–∏–ø–∞"""
	builder = InlineKeyboardBuilder()
	builder.button(text="üîó URL-–∫–Ω–æ–ø–∫–∞", callback_data="button_type_url")
	builder.button(text="üí¨ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="button_type_text")
	builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_manage_buttons")
	builder.adjust(1)
	
	await callback.message.edit_text(
		"üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–Ω–æ–ø–∫–∏:",
		reply_markup=builder.as_markup()
	)
	await state.set_state(WelcomeStates.SELECT_BUTTON_TYPE)
	await callback.answer()


@router.callback_query(
	WelcomeStates.SELECT_BUTTON_TYPE,
	F.data.in_(["button_type_url", "button_type_text"])
)
async def select_button_type(
		callback: types.CallbackQuery,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏"""
	button_type = "url" if callback.data == "button_type_url" else "text"
	await state.update_data(button_type=button_type)
	
	back_kb = InlineKeyboardBuilder()
	back_kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="welcome_add_button")
	
	await callback.message.edit_text(
		"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
		reply_markup=back_kb.as_markup()
	)
	await state.set_state(WelcomeStates.WAITING_BUTTON_TEXT)
	await callback.answer()


@router.message(WelcomeStates.WAITING_BUTTON_TEXT)
async def add_button_text(
		message: types.Message,
		state: FSMContext
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
	# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
	if len(message.text) > 20:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
	if len(message.text) < 2:
		return await message.answer("‚ùå –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
	
	await state.update_data(button_text=message.text)
	data = await state.get_data()
	
	if data.get('button_type') == "url":
		await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
		await state.set_state(WelcomeStates.WAITING_BUTTON_URL)
	else:
		await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:")
		await state.set_state(WelcomeStates.WAITING_BUTTON_CONTENT)


@router.message(WelcomeStates.WAITING_BUTTON_URL)
async def add_button_url(
		message: types.Message,
		state: FSMContext,
		services: Services
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∫–Ω–æ–ø–∫–∏"""
	# –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
	data = await state.get_data()
	button_text = data.get('button_text')
	
	# –í–∞–ª–∏–¥–∞—Ü–∏—è URL
	if not message.text.startswith(('http://', 'https://')):
		return await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
	
	# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
	if await services.welcome.add_button(
			button_text=button_text,
			button_type="url",
			button_value=message.text
	):
		await message.answer("‚úÖ URL-–∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç?)")
	
	await state.clear()


@router.message(WelcomeStates.WAITING_BUTTON_CONTENT)
async def add_button_content(
		message: types.Message,
		state: FSMContext,
		services: Services
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏"""
	# –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
	data = await state.get_data()
	button_text = data.get('button_text')
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç
	if await services.welcome.add_button(
			button_text=button_text,
			button_type="text",
			button_value=message.text
	):
		await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	else:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É (–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç?)")
	
	await state.clear()


@router.callback_query(F.data == "welcome_remove_button")
async def remove_button_start(
		callback: types.CallbackQuery,
		services: Services
):
	"""–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏"""
	welcome_data = await services.welcome.get_welcome_data()
	buttons = welcome_data.get('buttons', [])
	
	if not buttons:
		return await callback.answer("‚Ñπ –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
	
	# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
	kb_builder = InlineKeyboardBuilder()
	for i, btn in enumerate(buttons):
		kb_builder.button(text=f"{i + 1}. {btn['text']}", callback_data=f"welcome_removebtn_{i}")
	kb_builder.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="welcome_manage_buttons")
	kb_builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
	
	await callback.message.edit_text(
		"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
		reply_markup=kb_builder.as_markup()
	)
	await callback.answer()


@router.callback_query(F.data.startswith("welcome_removebtn_"))
async def remove_button_confirm(
		callback: types.CallbackQuery,
		services: Services
):
	"""–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
	button_index = int(callback.data.split("_")[2])
	
	if await services.welcome.remove_button(button_index):
		await callback.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
	else:
		await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É", show_alert=True)
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏
	await manage_welcome_buttons(callback, services)


@router.callback_query(F.data == "welcome_clear_buttons")
async def clear_buttons(
		callback: types.CallbackQuery,
		services: Services
):
	"""–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
	await services.welcome.clear_buttons()
	await callback.answer("‚úÖ –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
	await manage_welcome_buttons(callback, services)


# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.callback_query(F.data == "welcome_preview")
async def preview_welcome(
		callback: types.CallbackQuery,
		state: FSMContext,
		services: Services
):
	"""–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
	# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
	welcome_data = await services.welcome.get_welcome_data()
	text = welcome_data.get('text', '')
	buttons = welcome_data.get('buttons', [])
	media_type = welcome_data.get('media_type')
	media_file_id = welcome_data.get('media_file_id')
	
	# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫
	kb_builder = InlineKeyboardBuilder()
	for btn in buttons:
		if btn.get('type') == "text":
			# –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
			kb_builder.button(
				text=btn['text'],
				callback_data=f"welcome_textbtn:{btn['value']}"
			)
		else:
			# –î–ª—è URL-–∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL
			kb_builder.button(
				text=btn['text'],
				url=btn['value']
			)
	kb_builder.adjust(1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
	
	try:
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		await callback.message.answer(
			"üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>",
			reply_markup=InlineKeyboardBuilder()
			.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_welcome")
			.as_markup()
		)
		
		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if media_type and media_file_id:
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ —Å–≤–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
			if media_type == "photo":
				msg = await callback.bot.send_photo(
					chat_id=callback.message.chat.id,
					photo=media_file_id,
					caption=text,
					reply_markup=kb_builder.as_markup()
				)
			elif media_type == "video":
				msg = await callback.bot.send_video(
					chat_id=callback.message.chat.id,
					video=media_file_id,
					caption=text,
					reply_markup=kb_builder.as_markup()
				)
			elif media_type == "animation":
				msg = await callback.bot.send_animation(
					chat_id=callback.message.chat.id,
					animation=media_file_id,
					caption=text,
					reply_markup=kb_builder.as_markup()
				)
			elif media_type == "document":
				msg = await callback.bot.send_document(
					chat_id=callback.message.chat.id,
					document=media_file_id,
					caption=text,
					reply_markup=kb_builder.as_markup()
				)
			else:
				# –ï—Å–ª–∏ —Ç–∏–ø –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
				msg = await callback.bot.send_message(
					chat_id=callback.message.chat.id,
					text=text,
					reply_markup=kb_builder.as_markup()
				)
		else:
			# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
			msg = await callback.bot.send_message(
				chat_id=callback.message.chat.id,
				text=text,
				reply_markup=kb_builder.as_markup()
			)
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
		await state.update_data(delete_message=msg)
		await callback.answer()
	
	except Exception as e:
		await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ: {str(e)}", show_alert=True)


@router.callback_query(F.data.startswith("welcome_textbtn:"))
async def handle_welcome_button(
		callback: types.CallbackQuery,
		services: Services
):
	"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
	try:
		# –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–Ω–æ–ø–∫–∏ –∏–∑ callback_data
		button_id = callback.data.split(":", 1)[1]
		
		# –ò—â–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
		button = await services.welcome.get_button_by_id(button_id)
		
		if not button:
			await callback.answer("‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
			return
		
		if button.get('type') == "text":
			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
			await callback.message.answer(button['value'])
			await callback.answer()
		
		elif button.get('type') == "url":
			# –î–ª—è URL-–∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º (–º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å)
			await callback.answer()
	
	except Exception as e:
		logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
		await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)