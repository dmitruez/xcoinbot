import html

from aiogram import F, Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from ..keyboards.user_keyboard import (
	BACK_TO_MENU_BUTTON,
	CONTACT_ADMINS_BUTTON,
	USER_REPLY_CALLBACK_PREFIX,
	UserKeyboards,
)
from ..services import Services
from ..states.base_states import UserChatStates


router = Router(name=__name__)


async def _get_active_user(message: types.Message, services: Services):
	"""–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º"""
	if message.text and message.text.startswith('/'):
		return None

	admin = await services.admin.get_admin(message.from_user.id)
	if admin:
		return None

	user = await services.user.get_user_by_id(message.from_user.id)
	if not user or not user.captcha_passed:
		return None

	return user


@router.message(StateFilter(None), F.text == CONTACT_ADMINS_BUTTON)
async def start_user_dialog(message: types.Message, state: FSMContext, services: Services):
	user = await _get_active_user(message, services)
	if not user:
		return

	await state.set_state(UserChatStates.WAITING_MESSAGE)
	await state.update_data(reply_to_admin_id=None)
	await message.answer(
		"‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
		"–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.",
		reply_markup=UserKeyboards.chat_cancel()
	)


@router.callback_query(F.data.startswith(f"{USER_REPLY_CALLBACK_PREFIX}_"))
async def reply_to_admin(callback: types.CallbackQuery, state: FSMContext, services: Services):
	try:
		admin_id = int(callback.data.split('_')[-1])
	except (ValueError, IndexError):
		await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", show_alert=True)
		return

	admin = await services.admin.get_admin(admin_id)
	if not admin:
		await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
		return

	user = await services.user.get_user_by_id(callback.from_user.id)
	if not user or not user.captcha_passed:
		await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏", show_alert=True)
		return

	await state.set_state(UserChatStates.WAITING_MESSAGE)
	await state.update_data(reply_to_admin_id=admin.user_id)
	await callback.message.answer(
		"‚úèÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>\n\n"
		+ f"–í—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ: {html.escape(admin.full_name)} "
		+ f"(ID: <code>{admin.user_id}</code>)",
		reply_markup=UserKeyboards.chat_cancel()
	)
	await callback.answer()


@router.message(UserChatStates.WAITING_MESSAGE, F.text == BACK_TO_MENU_BUTTON)
async def cancel_user_dialog(message: types.Message, state: FSMContext):
	await state.clear()
	await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=UserKeyboards.main_menu())


@router.message(UserChatStates.WAITING_MESSAGE, F.text)
async def forward_user_message(message: types.Message, state: FSMContext, services: Services):
	user = await _get_active_user(message, services)
	if not user:
		await state.clear()
		return

	text = message.text.strip()
	if not text:
		await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
		return

	data = await state.get_data()
	target_admin_id = data.get('reply_to_admin_id')

	saved = await services.chat.save_user_message(user.user_id, text)
	if not saved:
		await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
		return

	await services.chat.notify_admins_about_user_message(user, text, target_admin_id=target_admin_id)

	await state.clear()
	await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=UserKeyboards.main_menu())


@router.message(UserChatStates.WAITING_MESSAGE)
async def handle_unsupported_content(message: types.Message):
	await message.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@router.message(StateFilter(None), F.text)
async def remind_chat_button(message: types.Message, services: Services):
	user = await _get_active_user(message, services)
	if not user:
		return

	await message.answer(
		"‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É"
		" ¬´–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∞–º¬ª –≤ –º–µ–Ω—é.",
		reply_markup=UserKeyboards.main_menu()
	)
