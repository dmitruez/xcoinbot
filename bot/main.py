from functools import partial

import asyncpg
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramNotFound, TelegramBadRequest
from aiogram.fsm.storage.memory import MemoryStorage

from .config import Config
from .handlers import register_handlers
from .middlewares import setup_middlewares
from .repositories import setup_repositories
from .services import setup_services, Services
from .utils.commands import setup_commands, delete_commands
from .utils.loggers import main_bot as logger


async def start_bot(bot: Bot, dp: Dispatcher):
	try:
		# –°–æ–∑–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
		pool = await create_pool()
		repos = await setup_repositories(pool)
		services = setup_services(bot, repos)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot.data –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
		dp['repos'] = repos
		dp['services'] = services

		# –°—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã
		await setup_commands(bot, services)

		# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
		setup_middlewares(dp)

		# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
		register_handlers(dp)

		_, super_admins = await services.admin.list_admins()

		for admin in super_admins:
			try:
				await bot.send_message(admin.user_id, text="üöÄ –ë–æ—Ç –ó–∞–ø—É—â–µ–Ω üöÄ")
			except (TelegramNotFound, TelegramBadRequest):
				pass

	# for developer_id in Config.DEVELOPERS_IDS:
	# 	try:
	# 		await bot.send_message(developer_id, text="üöÄ –ë–æ—Ç –ó–∞–ø—É—â–µ–Ω üöÄ")
	# 	except TelegramNotFound:
	# 		pass

	except Exception as e:
		logger.exception(e)


async def shutdown_bot(bot: Bot, dp: Dispatcher):
	services: Services = dp["services"]

	_, super_admins = await services.admin.list_admins()

	for admin in super_admins:
		try:
			await bot.send_message(admin.user_id, text="üõë –ë–æ—Ç –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë")
		except TelegramNotFound:
			pass

	# for developer_id in Config.DEVELOPERS_IDS:
	# 	try:
	# 		await bot.send_message(developer_id, text="üõë –ë–æ—Ç –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë")
	# 	except TelegramNotFound:
	# 		pass

	await delete_commands(bot, services)


async def create_pool():
	return await asyncpg.create_pool(
		dsn=f"postgresql://{Config.DB_USER}:{Config.DB_PASS}@{Config.DB_HOST}:{Config.DB_PORT}/{Config.DB_NAME}",
		# –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL
		min_size=5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
		max_size=20,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
		timeout=30,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
		command_timeout=60,  # –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
		max_inactive_connection_lifetime=300,  # –ó–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	)


async def main():
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
	bot = Bot(token=Config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
	dp = Dispatcher(storage=MemoryStorage())

	# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	start = partial(start_bot, bot, dp)
	end = partial(shutdown_bot, bot, dp)

	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Ö
	dp.startup.register(start)
	dp.shutdown.register(end)

	try:
		logger.info("Bot started")
		await dp.start_polling(bot)
	finally:
		await bot.session.close()
